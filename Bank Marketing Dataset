{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Bank Marketing Dataset","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyN8CtsiDQY3tvLqjS4Z9bXQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"fF-6l9uKTfZQ","colab_type":"code","colab":{}},"source":["# Imports\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import statsmodels as sm\n","from sklearn.preprocessing import LabelEncoder\n","\n","from sklearn.model_selection import train_test_split #split\n","from sklearn.metrics import accuracy_score #metrics\n","\n","#tools for hyperparameters search\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n","\n","from sklearn.metrics import roc_curve\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import confusion_matrix, accuracy_score, f1_score, precision_score, recall_score\n","from sklearn.metrics import auc\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import precision_recall_curve\n","from sklearn.model_selection import GridSearchCV\n","\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC, LinearSVC\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from xgboost import XGBClassifier\n","from lightgbm import LGBMClassifier\n","from sklearn.ensemble import BaggingClassifier\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Activation\n","from keras.callbacks import EarlyStopping\n","from keras.utils import to_categorical"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Os4HAkWT-rR","colab_type":"code","colab":{}},"source":["bank = pd.read_csv('/Bank_Marketing/Data/bank/bank-full.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A-aZkFllwc9L","colab_type":"text"},"source":["# Data analysis and pre-processing"]},{"cell_type":"code","metadata":{"id":"0OwiGGi5UDL3","colab_type":"code","outputId":"29a08f9a-a18b-4bed-9cd1-0d3448829261","executionInfo":{"status":"ok","timestamp":1591433297502,"user_tz":-60,"elapsed":15885,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["bank.head()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>job</th>\n","      <th>marital</th>\n","      <th>education</th>\n","      <th>default</th>\n","      <th>balance</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>contact</th>\n","      <th>day</th>\n","      <th>month</th>\n","      <th>duration</th>\n","      <th>campaign</th>\n","      <th>pdays</th>\n","      <th>previous</th>\n","      <th>poutcome</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>58</td>\n","      <td>management</td>\n","      <td>married</td>\n","      <td>tertiary</td>\n","      <td>no</td>\n","      <td>2143</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>261</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>44</td>\n","      <td>technician</td>\n","      <td>single</td>\n","      <td>secondary</td>\n","      <td>no</td>\n","      <td>29</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>151</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>entrepreneur</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>no</td>\n","      <td>2</td>\n","      <td>yes</td>\n","      <td>yes</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>76</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47</td>\n","      <td>blue-collar</td>\n","      <td>married</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","      <td>1506</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>92</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33</td>\n","      <td>unknown</td>\n","      <td>single</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>198</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age           job  marital  education  ... pdays  previous poutcome   y\n","0   58    management  married   tertiary  ...    -1         0  unknown  no\n","1   44    technician   single  secondary  ...    -1         0  unknown  no\n","2   33  entrepreneur  married  secondary  ...    -1         0  unknown  no\n","3   47   blue-collar  married    unknown  ...    -1         0  unknown  no\n","4   33       unknown   single    unknown  ...    -1         0  unknown  no\n","\n","[5 rows x 17 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"TmUzvW3hUGEm","colab_type":"code","outputId":"ad41d0e8-7665-4456-cb67-d672c30a8fe6","executionInfo":{"status":"ok","timestamp":1591433297504,"user_tz":-60,"elapsed":15516,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bank.shape"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45211, 17)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"GvFvg8Y3VJL0","colab_type":"text"},"source":["Separating numerical and categorical data"]},{"cell_type":"code","metadata":{"id":"6H5WviUXcAhy","colab_type":"code","outputId":"aa1ded83-46e1-4571-f431-dcbf938b0e81","executionInfo":{"status":"ok","timestamp":1591433297505,"user_tz":-60,"elapsed":14861,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["num_cols  = bank.columns.values[(bank.dtypes =='int64') | (bank.dtypes =='float64')]\n","num_cols"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['age', 'balance', 'day', 'duration', 'campaign', 'pdays',\n","       'previous'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"u8v5gqAMcAeA","colab_type":"code","outputId":"e75aee21-c071-48dd-a7ac-681e332e9762","executionInfo":{"status":"ok","timestamp":1591433297507,"user_tz":-60,"elapsed":14534,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["categorical_columns = bank.columns.values[(bank.dtypes == 'object')]\n","categorical_columns"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['job', 'marital', 'education', 'default', 'housing', 'loan',\n","       'contact', 'month', 'poutcome', 'y'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"oZGbdImrQp0C","colab_type":"text"},"source":["Analysing data"]},{"cell_type":"code","metadata":{"id":"-MqXOZkNQvBT","colab_type":"code","outputId":"c828c93a-4487-4df3-a5bc-e876e8a9e8c5","executionInfo":{"status":"ok","timestamp":1591433297508,"user_tz":-60,"elapsed":13805,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":296}},"source":["# Number of customers opened the Term Deposit\n","\n","plt.figure(figsize=(8,4))\n","sns.countplot(x='y',data=bank,palette='Set2')"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11ed524b38>"]},"metadata":{"tags":[]},"execution_count":10},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"L54wo_PpSrp-","colab_type":"code","outputId":"6135047f-c14d-44e3-e1e5-f8a956b75989","executionInfo":{"status":"ok","timestamp":1591433297510,"user_tz":-60,"elapsed":13457,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["bank.y.value_counts()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["no     39922\n","yes     5289\n","Name: y, dtype: int64"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"C3yKxeqIlwhv","colab_type":"code","outputId":"4b37fb8e-27eb-40e0-de01-6fc993ab19fc","executionInfo":{"status":"ok","timestamp":1591433297511,"user_tz":-60,"elapsed":13154,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["bank['y'].value_counts(normalize=True)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["no     0.883015\n","yes    0.116985\n","Name: y, dtype: float64"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"7iU2yjvymGyD","colab_type":"text"},"source":["Only 11.6% customers in the dataset have opened a term deposit. \n","\n","Hence the Y variable has a high class imbalance. Hence accuracy will not be a reliable model performance measure.\n","\n","Thus False Negative is very critical for this model, because a false negative is a customer who will potentially opt a term deposit but who has been classified as 'will not opt'. \n","\n","Hence the **most relevant model performance measure is Recall**\n"]},{"cell_type":"markdown","metadata":{"id":"0AVykjLnZYID","colab_type":"text"},"source":["Analysis of categorical attributes against 'y' (opening of term deposit)"]},{"cell_type":"code","metadata":{"id":"4tm8SAUGQu9Z","colab_type":"code","outputId":"5e952da4-c0fb-4998-d3cf-e90068855d6b","executionInfo":{"status":"ok","timestamp":1591433299887,"user_tz":-60,"elapsed":14386,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":514}},"source":["#'marital', 'education', 'default', 'housing', 'loan','contact' vs 'y'\n","\n","plt.figure(figsize=[18,8])\n","\n","plt.subplot(231)\n","sns.countplot(x='marital', hue='y', data=bank,palette=\"Set2\")\n","\n","plt.subplot(232)\n","sns.countplot(x='education', hue='y', data=bank,palette=\"Set2\")\n","\n","plt.subplot(233)\n","sns.countplot(x='contact', hue='y', data=bank,palette=\"Set2\")\n","\n","plt.subplot(234)\n","sns.countplot(x='default', hue='y', data=bank,palette=\"Set2\")\n","\n","plt.subplot(235)\n","sns.countplot(x='housing', hue='y', data=bank,palette=\"Set2\")\n","\n","plt.subplot(236)\n","sns.countplot(x='loan', hue='y', data=bank,palette=\"Set2\")"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11d20b6fd0>"]},"metadata":{"tags":[]},"execution_count":13},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"qNNF9vNFTZdj","colab_type":"code","outputId":"2a4cf625-4018-4bf0-b096-f0783131584d","executionInfo":{"status":"ok","timestamp":1591433299889,"user_tz":-60,"elapsed":13948,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":375}},"source":["#'job' vs 'y'\n","plt.figure(figsize=(14,12))\n","\n","plt.subplot(211)\n","sns.countplot(y='job',data=bank,hue='y',palette='Set2')\n"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11d31c6a58>"]},"metadata":{"tags":[]},"execution_count":14},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1008x864 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"sLNYgkFTTZZ3","colab_type":"code","outputId":"792b606c-16ee-42ef-af06-58a84a5ede7e","executionInfo":{"status":"ok","timestamp":1591433299890,"user_tz":-60,"elapsed":13619,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":375}},"source":["# 'month' vs 'y' \n","plt.figure(figsize=(14,12))\n","\n","plt.subplot(212)\n","sns.countplot(x='month',data=bank,hue='y',palette='Set2')\n"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11d1efaef0>"]},"metadata":{"tags":[]},"execution_count":15},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1008x864 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"0V0kj0xSTZXG","colab_type":"code","outputId":"8bf66911-7e4d-4ccf-f8aa-f5c10ff310d0","executionInfo":{"status":"ok","timestamp":1591433299892,"user_tz":-60,"elapsed":13472,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":351}},"source":["#'day' vs 'y'\n","\n","plt.figure(figsize=(17,5))\n","sns.countplot(x='day',data=bank,hue='y',palette='Set2')\n"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11d39cf128>"]},"metadata":{"tags":[]},"execution_count":16},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1224x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"TSSHfGwfTZTi","colab_type":"code","outputId":"d26d634c-7448-4b7d-cfe3-7581e463d9a0","executionInfo":{"status":"ok","timestamp":1591433302480,"user_tz":-60,"elapsed":15775,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":353}},"source":["#'poutcome' vs 'y'\n","plt.figure(figsize=(17,5))\n","sns.countplot(x='poutcome',data=bank,hue='y',palette='Set2')\n"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11d1f496d8>"]},"metadata":{"tags":[]},"execution_count":17},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1224x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"9RZ1dYxBBNmH","colab_type":"text"},"source":["Further analysis of 'default' attribute"]},{"cell_type":"code","metadata":{"id":"uYpk_8HXBM5n","colab_type":"code","outputId":"467a2fef-e90f-4132-f1d1-b034969f34c9","executionInfo":{"status":"ok","timestamp":1591433302482,"user_tz":-60,"elapsed":15289,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print(pd.crosstab(bank['default'], bank['y'], normalize='index').sort_values(by='yes',ascending=False ))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["y              no       yes\n","default                    \n","no       0.882039  0.117961\n","yes      0.936196  0.063804\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"x745FoBPBMyW","colab_type":"code","outputId":"d896f95b-bd90-4ec8-bc1f-1fd648432b9b","executionInfo":{"status":"ok","timestamp":1591433302484,"user_tz":-60,"elapsed":15186,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["print(bank['default'].value_counts(normalize=True))\n"],"execution_count":19,"outputs":[{"output_type":"stream","text":["no     0.981973\n","yes    0.018027\n","Name: default, dtype: float64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"V3I-XtL_ETUV","colab_type":"text"},"source":["Decision: \n","\n","Since default - yes is only 2% of the data and the conversion(opening of term deposit) is also comparitively lower for default (only 11+6 = 16%), we can remove this column during data clean up"]},{"cell_type":"markdown","metadata":{"id":"2BDCBZAOZzs_","colab_type":"text"},"source":["Analysis of numerical attributes against 'y' (opening of term deposit)"]},{"cell_type":"code","metadata":{"id":"w1yigzDqiNWv","colab_type":"code","colab":{}},"source":["# ['age', 'balance', 'day', 'duration', 'campaign', 'pdays','previous']"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"26roKLcGusuf","colab_type":"text"},"source":["Regarding the attribute: \"DURATION' it is mentioned in the dataset description that \"this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.\"\n","\n","Thus we can remove this column during data clean up"]},{"cell_type":"code","metadata":{"id":"sY97IqWmybQb","colab_type":"code","colab":{}},"source":["# Checking for redundant or strongly related numeric columns\n","\n","num_correlation = bank[num_cols].corr(method=\"spearman\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LIteyWrez1Rz","colab_type":"code","outputId":"5ec74163-478a-497f-e994-ea231bc8e9b0","executionInfo":{"status":"ok","timestamp":1591433302490,"user_tz":-60,"elapsed":13993,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":322}},"source":["# correlation\n","sns.heatmap(num_correlation, annot=True,cbar=False, square=True)"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11d2152cc0>"]},"metadata":{"tags":[]},"execution_count":22},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"CGmkflDx0XAh","colab_type":"text"},"source":["Attributes 'pdays' and 'previous' are strongly correlated thus only one of them can be used to check against 'y' "]},{"cell_type":"code","metadata":{"id":"XnNQgivt_j4f","colab_type":"code","outputId":"c176902c-464f-4187-d359-4a83855d805f","executionInfo":{"status":"ok","timestamp":1591433302491,"user_tz":-60,"elapsed":13706,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":142}},"source":["#Group numerical variables by 'target' to check mean value for cases where term deposit is opted and not opted\n","np.round(bank.groupby([\"y\"]).mean() ,1)\n"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>balance</th>\n","      <th>day</th>\n","      <th>duration</th>\n","      <th>campaign</th>\n","      <th>pdays</th>\n","      <th>previous</th>\n","    </tr>\n","    <tr>\n","      <th>y</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>no</th>\n","      <td>40.8</td>\n","      <td>1303.7</td>\n","      <td>15.9</td>\n","      <td>221.2</td>\n","      <td>2.8</td>\n","      <td>36.4</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>yes</th>\n","      <td>41.7</td>\n","      <td>1804.3</td>\n","      <td>15.2</td>\n","      <td>537.3</td>\n","      <td>2.1</td>\n","      <td>68.7</td>\n","      <td>1.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      age  balance   day  duration  campaign  pdays  previous\n","y                                                            \n","no   40.8   1303.7  15.9     221.2       2.8   36.4       0.5\n","yes  41.7   1804.3  15.2     537.3       2.1   68.7       1.2"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"QWnwuUG3FSKO","colab_type":"text"},"source":["Decision:\n","\n","The mean balance is higher for customers who subscribe to the term deposit compared to those who dont\n","\n","Number of days that passed by after the client was last contacted from a previous campaign is higher for people who have subscribed\n","\n","Number of contacts performed before this campaign is also higher for customers who subscribe\n","\n","All of the above facts indicate that customers with a higher balance and those who have been contacted frequently before the campaign tend to subscribe for the term deposit"]},{"cell_type":"code","metadata":{"id":"5Oa8Du3DryR-","colab_type":"code","outputId":"03729a82-12c9-4fa0-f98c-fc9e64cdea15","executionInfo":{"status":"ok","timestamp":1591433302493,"user_tz":-60,"elapsed":13289,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["#'balance' and 'y'\n","\n","balance_df = pd.DataFrame()\n","balance_df['balance_yes'] = (bank[bank['y'] == 'yes'][['y','balance']].describe())['balance']\n","balance_df['balance_no'] = (bank[bank['y'] == 'no'][['y','balance']].describe())['balance']\n","\n","balance_df"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>balance_yes</th>\n","      <th>balance_no</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5289.000000</td>\n","      <td>39922.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1804.267915</td>\n","      <td>1303.714969</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3501.104777</td>\n","      <td>2974.195473</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-3058.000000</td>\n","      <td>-8019.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>210.000000</td>\n","      <td>58.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>733.000000</td>\n","      <td>417.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2159.000000</td>\n","      <td>1345.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>81204.000000</td>\n","      <td>102127.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        balance_yes     balance_no\n","count   5289.000000   39922.000000\n","mean    1804.267915    1303.714969\n","std     3501.104777    2974.195473\n","min    -3058.000000   -8019.000000\n","25%      210.000000      58.000000\n","50%      733.000000     417.000000\n","75%     2159.000000    1345.000000\n","max    81204.000000  102127.000000"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"kwjN3fjGryJU","colab_type":"code","outputId":"f17e695f-ff07-46c9-b812-48eb104efc50","executionInfo":{"status":"ok","timestamp":1591433302494,"user_tz":-60,"elapsed":13102,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["balance_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Balance vs y(deposit) statistics')"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11cf3041d0>"]},"metadata":{"tags":[]},"execution_count":25},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"hs5aDrW-ryFs","colab_type":"code","outputId":"53fbb954-5d6f-4e85-e85e-58c82c70a562","executionInfo":{"status":"ok","timestamp":1591433302495,"user_tz":-60,"elapsed":12731,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["#age and deposit\n","\n","age_df = pd.DataFrame()\n","age_df['age_yes'] = (bank[bank['y'] == 'yes'][['y','age']].describe())['age']\n","age_df['age_no'] = (bank[bank['y'] == 'no'][['y','age']].describe())['age']\n","\n","age_df"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age_yes</th>\n","      <th>age_no</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5289.000000</td>\n","      <td>39922.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>41.670070</td>\n","      <td>40.838986</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>13.497781</td>\n","      <td>10.172662</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>18.000000</td>\n","      <td>18.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>31.000000</td>\n","      <td>33.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>38.000000</td>\n","      <td>39.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>50.000000</td>\n","      <td>48.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>95.000000</td>\n","      <td>95.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           age_yes        age_no\n","count  5289.000000  39922.000000\n","mean     41.670070     40.838986\n","std      13.497781     10.172662\n","min      18.000000     18.000000\n","25%      31.000000     33.000000\n","50%      38.000000     39.000000\n","75%      50.000000     48.000000\n","max      95.000000     95.000000"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"SAJO5j9jryCS","colab_type":"code","outputId":"7f4fda57-dafd-41b2-cc20-32513269f2a8","executionInfo":{"status":"ok","timestamp":1591433302496,"user_tz":-60,"elapsed":12577,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["age_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'age vs y(deposit) statistics')"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11ed524710>"]},"metadata":{"tags":[]},"execution_count":27},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"6UeQaUW5ryAS","colab_type":"code","outputId":"c987da11-5ee6-435b-c681-3ae95463d4ae","executionInfo":{"status":"ok","timestamp":1591433302498,"user_tz":-60,"elapsed":12199,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["#number of contacts performed during this campaign ('campaign') and deposit\n","\n","campaign_df = pd.DataFrame()\n","campaign_df['campaign_yes'] = (bank[bank['y'] == 'yes'][['y','campaign']].describe())['campaign']\n","campaign_df['campaign_no'] = (bank[bank['y'] == 'no'][['y','campaign']].describe())['campaign']\n","\n","campaign_df"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>campaign_yes</th>\n","      <th>campaign_no</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5289.000000</td>\n","      <td>39922.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2.141047</td>\n","      <td>2.846350</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.921826</td>\n","      <td>3.212767</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>3.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>32.000000</td>\n","      <td>63.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       campaign_yes   campaign_no\n","count   5289.000000  39922.000000\n","mean       2.141047      2.846350\n","std        1.921826      3.212767\n","min        1.000000      1.000000\n","25%        1.000000      1.000000\n","50%        2.000000      2.000000\n","75%        3.000000      3.000000\n","max       32.000000     63.000000"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"vg4QkdLQrx-h","colab_type":"code","outputId":"fe8c29f3-e585-47aa-fdc8-5886e3090289","executionInfo":{"status":"ok","timestamp":1591433302499,"user_tz":-60,"elapsed":12049,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["campaign_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'campaign vs y(deposit) statistics')"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11d1f9de80>"]},"metadata":{"tags":[]},"execution_count":29},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"EJTz0moQrx7l","colab_type":"code","outputId":"40b9e0dc-4d1c-4164-de6f-2e21d846dd68","executionInfo":{"status":"ok","timestamp":1591433302500,"user_tz":-60,"elapsed":11851,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["#number of contacts performed during previous campaign ('previous') and deposit\n","\n","previous_df = pd.DataFrame()\n","previous_df['previous_yes'] = (bank[bank['y'] == 'yes'][['y','previous']].describe())['previous']\n","previous_df['previous_no'] = (bank[bank['y'] == 'no'][['y','previous']].describe())['previous']\n","\n","previous_df"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>previous_yes</th>\n","      <th>previous_no</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5289.000000</td>\n","      <td>39922.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.170354</td>\n","      <td>0.502154</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.553272</td>\n","      <td>2.256771</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>58.000000</td>\n","      <td>275.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       previous_yes   previous_no\n","count   5289.000000  39922.000000\n","mean       1.170354      0.502154\n","std        2.553272      2.256771\n","min        0.000000      0.000000\n","25%        0.000000      0.000000\n","50%        0.000000      0.000000\n","75%        1.000000      0.000000\n","max       58.000000    275.000000"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"-ekUJUkIrx3B","colab_type":"code","outputId":"c537c6e2-4e1c-4b18-a40d-18c32e47f1db","executionInfo":{"status":"ok","timestamp":1591433302502,"user_tz":-60,"elapsed":11652,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["previous_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'previous vs y(deposit) statistics')"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11d20834e0>"]},"metadata":{"tags":[]},"execution_count":31},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"EEbkjssf3YtD","colab_type":"code","colab":{}},"source":["num_df = bank[num_cols]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h9rPXYNd3Yq5","colab_type":"code","outputId":"7eefa151-5da9-461e-9e63-b4919c60f93c","executionInfo":{"status":"ok","timestamp":1591433306273,"user_tz":-60,"elapsed":14981,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":608}},"source":["# Box plotting for outlier identification\n","\n","%config InlineBackend.figure_format = 'retina'\n","plt.figure(figsize = (20,15))\n","\n","plt.subplot(331)\n","num_df[\"age\"].plot(kind='box')\n","plt.title('Age')\n","\n","plt.subplot(332)\n","num_df[\"balance\"].plot(kind='box')\n","plt.title('Balance')\n","\n","plt.subplot(333)\n","num_df[\"duration\"].plot(kind='box')\n","plt.title('last contact duration, in seconds')\n","\n","plt.subplot(334)\n","num_df[\"campaign\"].plot(kind='box')\n","plt.title('# contacts performed during campaign and for client')\n","\n","\n","plt.subplot(335)\n","num_df[\"pdays\"].plot(kind='box')\n","plt.title('# days after was contacted from previous campaign')\n","\n","plt.subplot(336)\n","num_df[\"previous\"].plot(kind='box')\n","plt.title('# contacts performed before campaign')"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, '# contacts performed before campaign')"]},"metadata":{"tags":[]},"execution_count":33},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x1080 with 6 Axes>"]},"metadata":{"tags":[],"image/png":{"width":1150,"height":574},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"apCMH49X7DHA","colab_type":"text"},"source":["Decision: all the numeric columns have outlier"]},{"cell_type":"markdown","metadata":{"id":"oJHqG68dW6Hs","colab_type":"text"},"source":["Numerical Outlier Detection with Flooring and Capping (%0.01 - %0.99)\n"]},{"cell_type":"code","metadata":{"id":"Z0XxS7Yz-K4_","colab_type":"code","outputId":"230b4a0f-52cf-45ab-a4dc-460fdbb785ac","executionInfo":{"status":"ok","timestamp":1591433306275,"user_tz":-60,"elapsed":14339,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["#Quantile-based Flooring and Capping\n","\n","print(bank['age'].quantile(0.01))\n","print(bank['age'].quantile(0.99))\n","print('--------------')\n","print(bank['balance'].quantile(0.01))\n","print(bank['balance'].quantile(0.99))\n","print('--------------')\n","print(bank['campaign'].quantile(0.01))\n","print(bank['campaign'].quantile(0.99))\n","print('--------------')\n","print(bank['pdays'].quantile(0.01))\n","print(bank['pdays'].quantile(0.99))\n","print('--------------')\n","print(bank['previous'].quantile(0.01))\n","print(bank['previous'].quantile(0.99))"],"execution_count":34,"outputs":[{"output_type":"stream","text":["23.0\n","71.0\n","--------------\n","-627.0\n","13164.900000000001\n","--------------\n","1.0\n","16.0\n","--------------\n","-1.0\n","370.0\n","--------------\n","0.0\n","8.900000000001455\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5OR0eOHIG0k0","colab_type":"text"},"source":["Outlier percentage for individual categorical attributes"]},{"cell_type":"markdown","metadata":{"id":"mRC7bujVAj-9","colab_type":"text"},"source":["'age'"]},{"cell_type":"code","metadata":{"id":"tvvIRXgS-Ky-","colab_type":"code","outputId":"d4839139-4509-479d-8f78-a3a5c3ed751a","executionInfo":{"status":"ok","timestamp":1591433306276,"user_tz":-60,"elapsed":13564,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['age'] <= 23] ) / len(bank) * 100"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.1214085067793236"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"RPu3GwKR-Kvr","colab_type":"code","outputId":"784afffa-710f-4d73-bb92-ceb45e997810","executionInfo":{"status":"ok","timestamp":1591433306278,"user_tz":-60,"elapsed":13273,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['age'] >= 71] ) / len(bank) * 100"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0771714848156422"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"OG_Tx0oEAvbZ","colab_type":"text"},"source":["only 1% of values above 71 or below 23. They are possibly outliers, so we should consider imputing some other value (possibly mean value) instead of these values during data cleansing"]},{"cell_type":"markdown","metadata":{"id":"6sB6GBLXAzHp","colab_type":"text"},"source":["'balance'"]},{"cell_type":"code","metadata":{"id":"DWR8ygLe-Ksw","colab_type":"code","outputId":"3c7a3b4f-8a7b-4d82-f414-a92cab286067","executionInfo":{"status":"ok","timestamp":1591433306279,"user_tz":-60,"elapsed":12545,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['balance'] <= -627.0] ) / len(bank) * 100"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.004180398575568"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"whcVB8fh-KqP","colab_type":"code","outputId":"3ed72a9b-78ea-4b86-fc18-9524fbeaf5c3","executionInfo":{"status":"ok","timestamp":1591433306280,"user_tz":-60,"elapsed":12183,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['balance'] >= 13164] ) / len(bank) * 100"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.004180398575568"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"bXJAQ14oA12T","colab_type":"text"},"source":["only 1% of values above 13164 or below -627. They are possibly outliers, so we should consider imputing some other value (possibly mean value) instead of these values during data cleansing"]},{"cell_type":"markdown","metadata":{"id":"wLVMbjmwBDZh","colab_type":"text"},"source":["'campaign'"]},{"cell_type":"code","metadata":{"id":"-CisoWPD-Kfr","colab_type":"code","outputId":"63acd30c-be31-4718-f5cd-b16f35927dd0","executionInfo":{"status":"ok","timestamp":1591433306282,"user_tz":-60,"elapsed":11525,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['campaign'] <= 1] ) / len(bank) * 100"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["38.80471566654133"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"5TCBLGbz-Kb8","colab_type":"code","outputId":"24f82b44-5884-42d0-c37d-f881bf4a194a","executionInfo":{"status":"ok","timestamp":1591433306283,"user_tz":-60,"elapsed":11246,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['campaign'] >= 16] ) / len(bank) * 100"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.172281082037557"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"markdown","metadata":{"id":"k6IvVvzWERWP","colab_type":"text"},"source":["In majority of the cases only once the client has been contacted during this campaign\n","\n","Only 1% of campaign values are 16 or above thus they can be considered as outliers "]},{"cell_type":"markdown","metadata":{"id":"1nmxlQ6EBOb7","colab_type":"text"},"source":["'pdays'"]},{"cell_type":"code","metadata":{"id":"ZRwvsl8sBRQC","colab_type":"code","outputId":"ad11913a-c3a6-419b-aa36-6e816a95cc73","executionInfo":{"status":"ok","timestamp":1591433306285,"user_tz":-60,"elapsed":10623,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['pdays'] <= -1] ) / len(bank) * 100"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["81.73674548229414"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"_ryEh8VVBSA-","colab_type":"code","outputId":"eb5064a2-433c-4265-92e2-d422cfdf5bc6","executionInfo":{"status":"ok","timestamp":1591433306286,"user_tz":-60,"elapsed":10474,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['pdays'] >= 370] ) / len(bank) * 100"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.07053593152109"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"markdown","metadata":{"id":"LNsUmhXZBTGG","colab_type":"text"},"source":["'pdays' holds the number of days that passed by after the client was last contacted from a previous campaign Looking closer into 'pdays' data we can see that:\n","\n","only 1% of values are above 370. They are possibly outliers.\n","\n","-1 possibly means that the client wasn't contacted before or stands for missing data.\n","\n","Since we are not sure exactly what -1 means we can drop this column, because -1 makes more than 50% of the values of the column."]},{"cell_type":"markdown","metadata":{"id":"9FfLcvpsBSoz","colab_type":"text"},"source":["'previous'"]},{"cell_type":"code","metadata":{"id":"8VdGF6eZBdx9","colab_type":"code","outputId":"6666ef23-c9d3-4e7d-ba3f-24949a52a301","executionInfo":{"status":"ok","timestamp":1591433306288,"user_tz":-60,"elapsed":9740,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['previous'] <= 0.0] ) / len(bank) * 100"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["81.73674548229414"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"GrCmF0xxBdLK","colab_type":"code","outputId":"26eea1f7-7b1b-40bb-c390-ca66d6ae87a5","executionInfo":{"status":"ok","timestamp":1591433306289,"user_tz":-60,"elapsed":9453,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len (bank[bank['previous'] >= 8.9] ) / len(bank) * 100"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0019685474773838"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"markdown","metadata":{"id":"y9ODUdMiBeez","colab_type":"text"},"source":["'previous' holds the number of contacts performed before this campaign.\n","\n","More than 80% clients have not been contacted before and there are only 1% clients who have been contacted more than 8 time before; which thus can be treated as outlier."]},{"cell_type":"markdown","metadata":{"id":"OL0tVRrSW55B","colab_type":"text"},"source":["Identifying columns with 'unknown' values or null values\n","\n","At the beginning of analysing our dataset, it was found that no column has null value (bank.info())\n","\n","However there are categorical columns with 'unknown' values"]},{"cell_type":"code","metadata":{"id":"BeNjCcz2oc3n","colab_type":"code","outputId":"306f152a-b9f6-4836-f56b-80c3e4f1e031","executionInfo":{"status":"ok","timestamp":1591433306291,"user_tz":-60,"elapsed":8865,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["# Rechecking for any null value in the numeric columns:\n","bank[num_cols].isnull().sum()"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age         0\n","balance     0\n","day         0\n","duration    0\n","campaign    0\n","pdays       0\n","previous    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"markdown","metadata":{"id":"XKmYGDRHruUF","colab_type":"text"},"source":["Checking for 'unknown' values in the categorical columns"]},{"cell_type":"code","metadata":{"id":"5CSYBfHUr3oQ","colab_type":"code","outputId":"a788c753-d47c-438a-ab5f-2c2605f7f399","executionInfo":{"status":"ok","timestamp":1591433306292,"user_tz":-60,"elapsed":8465,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# making a copy of the actual dataset to perform the check for 'unknown' values\n","\n","bank_copy = bank.copy()\n","bank_copy.shape"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45211, 17)"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"VZWJhIttrsji","colab_type":"code","colab":{}},"source":["bank_copy=bank_copy.replace('unknown', np.nan)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TeAziUzIsSfd","colab_type":"code","colab":{}},"source":["bank_copy=bank_copy.drop(['day', 'month'], axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DhKg71Q5sSbj","colab_type":"code","outputId":"70ba7216-1e80-4709-8b77-59a29c81a816","executionInfo":{"status":"ok","timestamp":1591433306296,"user_tz":-60,"elapsed":7772,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["bank_copy.columns"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['age', 'job', 'marital', 'education', 'default', 'balance', 'housing',\n","       'loan', 'contact', 'duration', 'campaign', 'pdays', 'previous',\n","       'poutcome', 'y'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"UDVLM8eysSZS","colab_type":"code","outputId":"4a7bfc95-be4e-4cd8-a070-612fa20bd1cd","executionInfo":{"status":"ok","timestamp":1591433306297,"user_tz":-60,"elapsed":7571,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":514}},"source":["c=len(bank_copy.index)-bank_copy.isnull().sum()\n","c=pd.DataFrame(c)\n","c.columns = ['#_Total_Entry']\n","\n","b=bank_copy.isnull().sum()\n","b=pd.DataFrame(b)\n","b.columns = ['#_Missing_Value']\n","\n","d=bank_copy.isnull().sum() / (bank_copy.isnull().sum() + len(bank_copy.index)-bank_copy.isnull().sum())\n","d=pd.DataFrame(d)\n","d.columns = [\"%_Missing_Value\"]\n","\n","e=bank_copy.dtypes\n","e=pd.DataFrame(e)\n","e.columns = [\"Data_Type\"]\n","\n","f=bank_copy.nunique()\n","f=pd.DataFrame(f)\n","f.columns = [\"#_Unique_Values\"]\n","\n","result = pd.concat([c, b, d, e, f], axis=1, sort=False)\n","result"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>#_Total_Entry</th>\n","      <th>#_Missing_Value</th>\n","      <th>%_Missing_Value</th>\n","      <th>Data_Type</th>\n","      <th>#_Unique_Values</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>age</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>int64</td>\n","      <td>77</td>\n","    </tr>\n","    <tr>\n","      <th>job</th>\n","      <td>44923</td>\n","      <td>288</td>\n","      <td>0.006370</td>\n","      <td>object</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>marital</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>object</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>education</th>\n","      <td>43354</td>\n","      <td>1857</td>\n","      <td>0.041074</td>\n","      <td>object</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>default</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>object</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>balance</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>int64</td>\n","      <td>7168</td>\n","    </tr>\n","    <tr>\n","      <th>housing</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>object</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>loan</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>object</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>contact</th>\n","      <td>32191</td>\n","      <td>13020</td>\n","      <td>0.287983</td>\n","      <td>object</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>duration</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>int64</td>\n","      <td>1573</td>\n","    </tr>\n","    <tr>\n","      <th>campaign</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>int64</td>\n","      <td>48</td>\n","    </tr>\n","    <tr>\n","      <th>pdays</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>int64</td>\n","      <td>559</td>\n","    </tr>\n","    <tr>\n","      <th>previous</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>int64</td>\n","      <td>41</td>\n","    </tr>\n","    <tr>\n","      <th>poutcome</th>\n","      <td>8252</td>\n","      <td>36959</td>\n","      <td>0.817478</td>\n","      <td>object</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>y</th>\n","      <td>45211</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>object</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           #_Total_Entry  #_Missing_Value  ...  Data_Type #_Unique_Values\n","age                45211                0  ...      int64              77\n","job                44923              288  ...     object              11\n","marital            45211                0  ...     object               3\n","education          43354             1857  ...     object               3\n","default            45211                0  ...     object               2\n","balance            45211                0  ...      int64            7168\n","housing            45211                0  ...     object               2\n","loan               45211                0  ...     object               2\n","contact            32191            13020  ...     object               2\n","duration           45211                0  ...      int64            1573\n","campaign           45211                0  ...      int64              48\n","pdays              45211                0  ...      int64             559\n","previous           45211                0  ...      int64              41\n","poutcome            8252            36959  ...     object               3\n","y                  45211                0  ...     object               2\n","\n","[15 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"markdown","metadata":{"id":"I-85K6QQTnmh","colab_type":"text"},"source":["Decision: 81% of values in the 'poutcome' column is 'unknown' thus we can conclude that this attribute does not have any major effect on deciding prospective term deposit by a client.\n","\n","Thus we can drop the column "]},{"cell_type":"markdown","metadata":{"id":"z4WcT4U3Y17F","colab_type":"text"},"source":["Data Cleansing"]},{"cell_type":"code","metadata":{"id":"qSCDHKPIrOph","colab_type":"code","outputId":"f58ef190-db90-4573-91e4-3e3bd515cc56","executionInfo":{"status":"ok","timestamp":1591433306298,"user_tz":-60,"elapsed":6893,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clean_df = bank.copy()\n","clean_df.shape"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45211, 17)"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"markdown","metadata":{"id":"bsF5NemWrEVQ","colab_type":"text"},"source":["Converting columns with 'yes' and 'no' values to boolean columns:\n","\n","'default', 'housing', 'loan', 'y'"]},{"cell_type":"code","metadata":{"id":"o5FPlEajfWuE","colab_type":"code","colab":{}},"source":["clean_df['default'] = np.where(clean_df['default'] == 'yes', 1,clean_df['default'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wSG3uiqwsg4u","colab_type":"code","colab":{}},"source":["clean_df['default'] = np.where(clean_df['default'] == 'no', 0,clean_df['default'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ocdIH7UyfeAD","colab_type":"code","outputId":"f7e5e1cd-406c-4ea5-81f5-335bc35cc44d","executionInfo":{"status":"ok","timestamp":1591433309890,"user_tz":-60,"elapsed":8894,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["clean_df.default.value_counts()"],"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    44396\n","1      815\n","Name: default, dtype: int64"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"E-B8xm2Ffd85","colab_type":"code","colab":{}},"source":["clean_df['housing'] = np.where(clean_df['housing'] == 'yes', 1,clean_df['housing'])\n","clean_df['housing'] = np.where(clean_df['housing'] == 'no', 0,clean_df['housing'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OUjtvBbXsggc","colab_type":"code","outputId":"ba9c38c6-78b3-4731-a74d-6d8300a19f31","executionInfo":{"status":"ok","timestamp":1591433309894,"user_tz":-60,"elapsed":8654,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["clean_df.housing.value_counts()"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    25130\n","0    20081\n","Name: housing, dtype: int64"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"id":"qDRGB1_Fmw6n","colab_type":"code","colab":{}},"source":["clean_df['loan'] = np.where(clean_df['loan'] == 'yes', 1,clean_df['loan'])\n","clean_df['loan'] = np.where(clean_df['loan'] == 'no', 0,clean_df['loan'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"d1DC1Ylfsg0q","colab_type":"code","outputId":"1da76eb2-2ff2-414e-e206-000439c16224","executionInfo":{"status":"ok","timestamp":1591433309897,"user_tz":-60,"elapsed":8387,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["clean_df.loan.value_counts()"],"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    37967\n","1     7244\n","Name: loan, dtype: int64"]},"metadata":{"tags":[]},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"Wwld_5IXbz3H","colab_type":"code","colab":{}},"source":["clean_df['y'] = np.where(clean_df['y'] == 'yes', 1,clean_df['y'])\n","clean_df['y'] = np.where(clean_df['y'] == 'no', 0,clean_df['y'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tKPLS-nFbsmC","colab_type":"code","outputId":"2ccdd62e-3c16-4a3b-dc51-039c977a311f","executionInfo":{"status":"ok","timestamp":1591433309901,"user_tz":-60,"elapsed":8059,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["clean_df.y.value_counts()"],"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    39922\n","1     5289\n","Name: y, dtype: int64"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"knbDHz1SbsiT","colab_type":"code","outputId":"66dc5b30-f117-4980-a293-4530b1bd4aab","executionInfo":{"status":"ok","timestamp":1591433309903,"user_tz":-60,"elapsed":7782,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["clean_df.head()"],"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>job</th>\n","      <th>marital</th>\n","      <th>education</th>\n","      <th>default</th>\n","      <th>balance</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>contact</th>\n","      <th>day</th>\n","      <th>month</th>\n","      <th>duration</th>\n","      <th>campaign</th>\n","      <th>pdays</th>\n","      <th>previous</th>\n","      <th>poutcome</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>58</td>\n","      <td>management</td>\n","      <td>married</td>\n","      <td>tertiary</td>\n","      <td>0</td>\n","      <td>2143</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>261</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>44</td>\n","      <td>technician</td>\n","      <td>single</td>\n","      <td>secondary</td>\n","      <td>0</td>\n","      <td>29</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>151</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>entrepreneur</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>76</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47</td>\n","      <td>blue-collar</td>\n","      <td>married</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","      <td>1506</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>92</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33</td>\n","      <td>unknown</td>\n","      <td>single</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>198</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age           job  marital  education  ... pdays  previous poutcome  y\n","0   58    management  married   tertiary  ...    -1         0  unknown  0\n","1   44    technician   single  secondary  ...    -1         0  unknown  0\n","2   33  entrepreneur  married  secondary  ...    -1         0  unknown  0\n","3   47   blue-collar  married    unknown  ...    -1         0  unknown  0\n","4   33       unknown   single    unknown  ...    -1         0  unknown  0\n","\n","[5 rows x 17 columns]"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"markdown","metadata":{"id":"tvuS7aGduERm","colab_type":"text"},"source":["Removal of outliers from columns:\n","\n","'age', 'balance', 'campaign', 'previous'"]},{"cell_type":"code","metadata":{"id":"rq6xaKp8uQq8","colab_type":"code","colab":{}},"source":["clean_df['age'] = np.where(clean_df['age'] < 23, int(clean_df.age.mean()),clean_df['age'])\n","clean_df['age'] = np.where(clean_df['age'] > 71, int(clean_df.age.mean()),clean_df['age'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xb-Z8uTfuQnn","colab_type":"code","colab":{}},"source":["clean_df['balance'] = np.where(clean_df['balance'] < -627, int(clean_df.balance.mean()),clean_df['balance'])\n","clean_df['balance'] = np.where(clean_df['balance'] > 13164, int(clean_df.balance.mean()),clean_df['balance'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sxyzcrpmuQlI","colab_type":"code","colab":{}},"source":["clean_df['campaign'] = np.where(clean_df['campaign'] < 1, int(clean_df.campaign.mean()),clean_df['campaign'])\n","clean_df['campaign'] = np.where(clean_df['campaign'] > 16, int(clean_df.campaign.mean()),clean_df['campaign'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4KNYiyjtuQg6","colab_type":"code","colab":{}},"source":["clean_df['previous'] = np.where(clean_df['previous'] > 8.9, int(clean_df.previous.mean()),clean_df['previous'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Sz2Z2NLJbq3W","colab_type":"code","outputId":"7411a68b-0c24-4851-a5d6-d0a94f6449c8","executionInfo":{"status":"ok","timestamp":1591433309913,"user_tz":-60,"elapsed":5772,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clean_df.previous.unique()"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 3, 1, 4, 2, 6, 5, 7, 8])"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"jt2odlIrbqzL","colab_type":"code","outputId":"dc51ea60-ad2c-4ac7-f04f-0300456f1f46","executionInfo":{"status":"ok","timestamp":1591433309914,"user_tz":-60,"elapsed":5424,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["clean_df.head()"],"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>job</th>\n","      <th>marital</th>\n","      <th>education</th>\n","      <th>default</th>\n","      <th>balance</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>contact</th>\n","      <th>day</th>\n","      <th>month</th>\n","      <th>duration</th>\n","      <th>campaign</th>\n","      <th>pdays</th>\n","      <th>previous</th>\n","      <th>poutcome</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>58</td>\n","      <td>management</td>\n","      <td>married</td>\n","      <td>tertiary</td>\n","      <td>0</td>\n","      <td>2143</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>261</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>44</td>\n","      <td>technician</td>\n","      <td>single</td>\n","      <td>secondary</td>\n","      <td>0</td>\n","      <td>29</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>151</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>entrepreneur</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>76</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47</td>\n","      <td>blue-collar</td>\n","      <td>married</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","      <td>1506</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>92</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33</td>\n","      <td>unknown</td>\n","      <td>single</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>198</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age           job  marital  education  ... pdays  previous poutcome  y\n","0   58    management  married   tertiary  ...    -1         0  unknown  0\n","1   44    technician   single  secondary  ...    -1         0  unknown  0\n","2   33  entrepreneur  married  secondary  ...    -1         0  unknown  0\n","3   47   blue-collar  married    unknown  ...    -1         0  unknown  0\n","4   33       unknown   single    unknown  ...    -1         0  unknown  0\n","\n","[5 rows x 17 columns]"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"markdown","metadata":{"id":"5lJAwqLrYGGQ","colab_type":"text"},"source":["Replacing 'unknown' values from categorical columns:\n","\n","'job', 'education', 'contact'"]},{"cell_type":"code","metadata":{"id":"uPnvnxJY3RfG","colab_type":"code","outputId":"38bce093-f25c-4246-f8f4-e4f64e1276c1","executionInfo":{"status":"ok","timestamp":1591433309915,"user_tz":-60,"elapsed":4725,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# finding mode \n","\n","clean_df.job.mode()"],"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    blue-collar\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"code","metadata":{"id":"f-NR_jTv4Rnk","colab_type":"code","colab":{}},"source":["# replacing 'unknown' value with mode \n","\n","clean_df['job'] = np.where(clean_df['job'] == 'unknown', 'blue-collar',clean_df['job'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ylUGlnw83RcH","colab_type":"code","outputId":"6aeceed2-e411-435c-a313-7c5f5d1a39fc","executionInfo":{"status":"ok","timestamp":1591433322883,"user_tz":-60,"elapsed":16774,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["clean_df.job.unique()"],"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['management', 'technician', 'entrepreneur', 'blue-collar',\n","       'retired', 'admin.', 'services', 'self-employed', 'unemployed',\n","       'housemaid', 'student'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"cDRN8Kwj4cCO","colab_type":"code","outputId":"0ab7a9be-7a67-486c-b72b-c905380e2028","executionInfo":{"status":"ok","timestamp":1591433324137,"user_tz":-60,"elapsed":17657,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# finding mode \n","\n","clean_df.education.mode()"],"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    secondary\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":72}]},{"cell_type":"code","metadata":{"id":"CqDvAvdWN27G","colab_type":"code","colab":{}},"source":["# replacing 'unknown' value with mode \n","\n","clean_df['education'] = np.where(clean_df['education'] == 'unknown', 'secondary',clean_df['education'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gx-jKpHn4b-I","colab_type":"code","outputId":"2de14620-9bbd-4979-f5df-b75903871224","executionInfo":{"status":"ok","timestamp":1591433324140,"user_tz":-60,"elapsed":16743,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clean_df.education.unique()"],"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['tertiary', 'secondary', 'primary'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"id":"yJ3FQ_Xt3RZm","colab_type":"code","outputId":"8ca2d0b3-a0fb-458f-ab16-df8c0fa69d7a","executionInfo":{"status":"ok","timestamp":1591433324143,"user_tz":-60,"elapsed":16358,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# finding mode \n","\n","clean_df.contact.mode()"],"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    cellular\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"Q1X3TL313RWZ","colab_type":"code","colab":{}},"source":["# replacing 'unknown' value with mode \n","\n","clean_df['contact'] = np.where(clean_df['contact'] == 'unknown', 'cellular',clean_df['contact'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q8jokSXabqt-","colab_type":"code","outputId":"f488ed99-fa20-40db-82d3-0f9a25ec6c10","executionInfo":{"status":"ok","timestamp":1591433324147,"user_tz":-60,"elapsed":15681,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clean_df.contact.unique()"],"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['cellular', 'telephone'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":77}]},{"cell_type":"code","metadata":{"id":"8Z3UlcX3akLS","colab_type":"code","outputId":"901f2033-0347-4a70-81a1-b8c1a85d9f66","executionInfo":{"status":"ok","timestamp":1591433324148,"user_tz":-60,"elapsed":15489,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["clean_df.head()"],"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>job</th>\n","      <th>marital</th>\n","      <th>education</th>\n","      <th>default</th>\n","      <th>balance</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>contact</th>\n","      <th>day</th>\n","      <th>month</th>\n","      <th>duration</th>\n","      <th>campaign</th>\n","      <th>pdays</th>\n","      <th>previous</th>\n","      <th>poutcome</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>58</td>\n","      <td>management</td>\n","      <td>married</td>\n","      <td>tertiary</td>\n","      <td>0</td>\n","      <td>2143</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>261</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>44</td>\n","      <td>technician</td>\n","      <td>single</td>\n","      <td>secondary</td>\n","      <td>0</td>\n","      <td>29</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>151</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>entrepreneur</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>76</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47</td>\n","      <td>blue-collar</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>0</td>\n","      <td>1506</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>92</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33</td>\n","      <td>blue-collar</td>\n","      <td>single</td>\n","      <td>secondary</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>198</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age           job  marital  education  ... pdays  previous poutcome  y\n","0   58    management  married   tertiary  ...    -1         0  unknown  0\n","1   44    technician   single  secondary  ...    -1         0  unknown  0\n","2   33  entrepreneur  married  secondary  ...    -1         0  unknown  0\n","3   47   blue-collar  married  secondary  ...    -1         0  unknown  0\n","4   33   blue-collar   single  secondary  ...    -1         0  unknown  0\n","\n","[5 rows x 17 columns]"]},"metadata":{"tags":[]},"execution_count":78}]},{"cell_type":"markdown","metadata":{"id":"WzC_19JybPSf","colab_type":"text"},"source":["Dropping columns we have decided not required for building model:\n","\n","'duration': As mentioned in the data description\n","\n","'pdays': Majority of values are unknown\n","\n","'poutcome': Majority of values are unknown\n","\n","'default': A very small percentage of values are positive towards opting term deposit "]},{"cell_type":"code","metadata":{"id":"ROtv6s0bcDGK","colab_type":"code","colab":{}},"source":["clean_df = clean_df.drop(columns= ['duration', 'pdays', 'poutcome','default'], axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"r4tkGleTcewO","colab_type":"code","outputId":"fff01854-c90d-4433-d93b-c2c4e3c1464f","executionInfo":{"status":"ok","timestamp":1591433324760,"user_tz":-60,"elapsed":15312,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clean_df.shape"],"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45211, 13)"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"qFdxN9eScaRx","colab_type":"code","outputId":"d5cf38c9-e1cd-4729-d455-0ef026d25f55","executionInfo":{"status":"ok","timestamp":1591433324762,"user_tz":-60,"elapsed":15207,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["clean_df.head()"],"execution_count":81,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>job</th>\n","      <th>marital</th>\n","      <th>education</th>\n","      <th>balance</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>contact</th>\n","      <th>day</th>\n","      <th>month</th>\n","      <th>campaign</th>\n","      <th>previous</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>58</td>\n","      <td>management</td>\n","      <td>married</td>\n","      <td>tertiary</td>\n","      <td>2143</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>44</td>\n","      <td>technician</td>\n","      <td>single</td>\n","      <td>secondary</td>\n","      <td>29</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>entrepreneur</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47</td>\n","      <td>blue-collar</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>1506</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33</td>\n","      <td>blue-collar</td>\n","      <td>single</td>\n","      <td>secondary</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>cellular</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age           job  marital  education  ...  month campaign previous  y\n","0   58    management  married   tertiary  ...    may        1        0  0\n","1   44    technician   single  secondary  ...    may        1        0  0\n","2   33  entrepreneur  married  secondary  ...    may        1        0  0\n","3   47   blue-collar  married  secondary  ...    may        1        0  0\n","4   33   blue-collar   single  secondary  ...    may        1        0  0\n","\n","[5 rows x 13 columns]"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"markdown","metadata":{"id":"QuySGurdJYve","colab_type":"text"},"source":["Further processing to convert categorical values to numeric values"]},{"cell_type":"code","metadata":{"id":"QliVRtFBa-Bx","colab_type":"code","colab":{}},"source":["cat_columns = ['job', 'marital', 'education', 'contact', 'month']\n","\n","for col in  cat_columns:\n","  clean_df = pd.concat([clean_df.drop(col, axis=1),pd.get_dummies(clean_df[col], prefix=col, prefix_sep='_', drop_first=False, dummy_na=False)], axis=1)\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8sEV6V2udxtu","colab_type":"code","outputId":"f8694803-2630-433f-d981-c63027d14542","executionInfo":{"status":"ok","timestamp":1591433324764,"user_tz":-60,"elapsed":14521,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clean_df.shape"],"execution_count":83,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45211, 39)"]},"metadata":{"tags":[]},"execution_count":83}]},{"cell_type":"code","metadata":{"id":"VYBVQnaAbNGL","colab_type":"code","outputId":"6b1020cd-4ea1-4ff7-97c6-0daad18b0d58","executionInfo":{"status":"ok","timestamp":1591433324765,"user_tz":-60,"elapsed":14130,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"source":["clean_df.head()"],"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>balance</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>day</th>\n","      <th>campaign</th>\n","      <th>previous</th>\n","      <th>y</th>\n","      <th>job_admin.</th>\n","      <th>job_blue-collar</th>\n","      <th>job_entrepreneur</th>\n","      <th>job_housemaid</th>\n","      <th>job_management</th>\n","      <th>job_retired</th>\n","      <th>job_self-employed</th>\n","      <th>job_services</th>\n","      <th>job_student</th>\n","      <th>job_technician</th>\n","      <th>job_unemployed</th>\n","      <th>marital_divorced</th>\n","      <th>marital_married</th>\n","      <th>marital_single</th>\n","      <th>education_primary</th>\n","      <th>education_secondary</th>\n","      <th>education_tertiary</th>\n","      <th>contact_cellular</th>\n","      <th>contact_telephone</th>\n","      <th>month_apr</th>\n","      <th>month_aug</th>\n","      <th>month_dec</th>\n","      <th>month_feb</th>\n","      <th>month_jan</th>\n","      <th>month_jul</th>\n","      <th>month_jun</th>\n","      <th>month_mar</th>\n","      <th>month_may</th>\n","      <th>month_nov</th>\n","      <th>month_oct</th>\n","      <th>month_sep</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>58</td>\n","      <td>2143</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>44</td>\n","      <td>29</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47</td>\n","      <td>1506</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age  balance housing loan  ...  month_may  month_nov  month_oct month_sep\n","0   58     2143       1    0  ...          1          0          0         0\n","1   44       29       1    0  ...          1          0          0         0\n","2   33        2       1    1  ...          1          0          0         0\n","3   47     1506       1    0  ...          1          0          0         0\n","4   33        1       0    0  ...          1          0          0         0\n","\n","[5 rows x 39 columns]"]},"metadata":{"tags":[]},"execution_count":84}]},{"cell_type":"code","metadata":{"id":"Ol7IiUJqdwXK","colab_type":"code","outputId":"7ee3f33a-3794-4101-a9f2-38e42406f2df","executionInfo":{"status":"ok","timestamp":1591433324766,"user_tz":-60,"elapsed":13966,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":697}},"source":["clean_df.isna().sum()"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                    0\n","balance                0\n","housing                0\n","loan                   0\n","day                    0\n","campaign               0\n","previous               0\n","y                      0\n","job_admin.             0\n","job_blue-collar        0\n","job_entrepreneur       0\n","job_housemaid          0\n","job_management         0\n","job_retired            0\n","job_self-employed      0\n","job_services           0\n","job_student            0\n","job_technician         0\n","job_unemployed         0\n","marital_divorced       0\n","marital_married        0\n","marital_single         0\n","education_primary      0\n","education_secondary    0\n","education_tertiary     0\n","contact_cellular       0\n","contact_telephone      0\n","month_apr              0\n","month_aug              0\n","month_dec              0\n","month_feb              0\n","month_jan              0\n","month_jul              0\n","month_jun              0\n","month_mar              0\n","month_may              0\n","month_nov              0\n","month_oct              0\n","month_sep              0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"id":"mtDD2jDLzbu6","colab_type":"code","outputId":"cc329e86-225e-4115-d2c8-7d4dcf59dcad","executionInfo":{"status":"ok","timestamp":1591433324767,"user_tz":-60,"elapsed":13851,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":799}},"source":["clean_df.info()"],"execution_count":86,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 45211 entries, 0 to 45210\n","Data columns (total 39 columns):\n"," #   Column               Non-Null Count  Dtype \n","---  ------               --------------  ----- \n"," 0   age                  45211 non-null  int64 \n"," 1   balance              45211 non-null  int64 \n"," 2   housing              45211 non-null  object\n"," 3   loan                 45211 non-null  object\n"," 4   day                  45211 non-null  int64 \n"," 5   campaign             45211 non-null  int64 \n"," 6   previous             45211 non-null  int64 \n"," 7   y                    45211 non-null  object\n"," 8   job_admin.           45211 non-null  uint8 \n"," 9   job_blue-collar      45211 non-null  uint8 \n"," 10  job_entrepreneur     45211 non-null  uint8 \n"," 11  job_housemaid        45211 non-null  uint8 \n"," 12  job_management       45211 non-null  uint8 \n"," 13  job_retired          45211 non-null  uint8 \n"," 14  job_self-employed    45211 non-null  uint8 \n"," 15  job_services         45211 non-null  uint8 \n"," 16  job_student          45211 non-null  uint8 \n"," 17  job_technician       45211 non-null  uint8 \n"," 18  job_unemployed       45211 non-null  uint8 \n"," 19  marital_divorced     45211 non-null  uint8 \n"," 20  marital_married      45211 non-null  uint8 \n"," 21  marital_single       45211 non-null  uint8 \n"," 22  education_primary    45211 non-null  uint8 \n"," 23  education_secondary  45211 non-null  uint8 \n"," 24  education_tertiary   45211 non-null  uint8 \n"," 25  contact_cellular     45211 non-null  uint8 \n"," 26  contact_telephone    45211 non-null  uint8 \n"," 27  month_apr            45211 non-null  uint8 \n"," 28  month_aug            45211 non-null  uint8 \n"," 29  month_dec            45211 non-null  uint8 \n"," 30  month_feb            45211 non-null  uint8 \n"," 31  month_jan            45211 non-null  uint8 \n"," 32  month_jul            45211 non-null  uint8 \n"," 33  month_jun            45211 non-null  uint8 \n"," 34  month_mar            45211 non-null  uint8 \n"," 35  month_may            45211 non-null  uint8 \n"," 36  month_nov            45211 non-null  uint8 \n"," 37  month_oct            45211 non-null  uint8 \n"," 38  month_sep            45211 non-null  uint8 \n","dtypes: int64(5), object(3), uint8(31)\n","memory usage: 4.1+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yZKb6pdW0j_a","colab_type":"code","colab":{}},"source":["clean_df[[\"housing\", \"loan\"]] = clean_df[[\"housing\", \"loan\"]].apply(pd.to_numeric)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GhxvPOIv9fP5","colab_type":"code","colab":{}},"source":["clean_df['y']=clean_df['y'].astype('category')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTP-plOjyft6","colab_type":"code","outputId":"22b34672-6990-4667-9a47-9cb96ae8172a","executionInfo":{"status":"ok","timestamp":1591435756721,"user_tz":-60,"elapsed":565,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":799}},"source":["clean_df.info()"],"execution_count":112,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 45211 entries, 0 to 45210\n","Data columns (total 39 columns):\n"," #   Column               Non-Null Count  Dtype   \n","---  ------               --------------  -----   \n"," 0   age                  45211 non-null  int64   \n"," 1   balance              45211 non-null  int64   \n"," 2   housing              45211 non-null  int64   \n"," 3   loan                 45211 non-null  int64   \n"," 4   day                  45211 non-null  int64   \n"," 5   campaign             45211 non-null  int64   \n"," 6   previous             45211 non-null  int64   \n"," 7   y                    45211 non-null  category\n"," 8   job_admin.           45211 non-null  uint8   \n"," 9   job_blue-collar      45211 non-null  uint8   \n"," 10  job_entrepreneur     45211 non-null  uint8   \n"," 11  job_housemaid        45211 non-null  uint8   \n"," 12  job_management       45211 non-null  uint8   \n"," 13  job_retired          45211 non-null  uint8   \n"," 14  job_self-employed    45211 non-null  uint8   \n"," 15  job_services         45211 non-null  uint8   \n"," 16  job_student          45211 non-null  uint8   \n"," 17  job_technician       45211 non-null  uint8   \n"," 18  job_unemployed       45211 non-null  uint8   \n"," 19  marital_divorced     45211 non-null  uint8   \n"," 20  marital_married      45211 non-null  uint8   \n"," 21  marital_single       45211 non-null  uint8   \n"," 22  education_primary    45211 non-null  uint8   \n"," 23  education_secondary  45211 non-null  uint8   \n"," 24  education_tertiary   45211 non-null  uint8   \n"," 25  contact_cellular     45211 non-null  uint8   \n"," 26  contact_telephone    45211 non-null  uint8   \n"," 27  month_apr            45211 non-null  uint8   \n"," 28  month_aug            45211 non-null  uint8   \n"," 29  month_dec            45211 non-null  uint8   \n"," 30  month_feb            45211 non-null  uint8   \n"," 31  month_jan            45211 non-null  uint8   \n"," 32  month_jul            45211 non-null  uint8   \n"," 33  month_jun            45211 non-null  uint8   \n"," 34  month_mar            45211 non-null  uint8   \n"," 35  month_may            45211 non-null  uint8   \n"," 36  month_nov            45211 non-null  uint8   \n"," 37  month_oct            45211 non-null  uint8   \n"," 38  month_sep            45211 non-null  uint8   \n","dtypes: category(1), int64(7), uint8(31)\n","memory usage: 3.8 MB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XeX1APrMwn0-","colab_type":"text"},"source":["# Model"]},{"cell_type":"markdown","metadata":{"id":"SNuonHWWSdNE","colab_type":"text"},"source":["Feature selection"]},{"cell_type":"markdown","metadata":{"id":"Y6KXibdjutzz","colab_type":"text"},"source":["Identifying most influencing features:\n"]},{"cell_type":"code","metadata":{"id":"_Vqmdsald9Q1","colab_type":"code","colab":{}},"source":["X = clean_df.drop(columns = 'y')\n","y = clean_df[['y']]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sy8qCMhXzcD7","colab_type":"text"},"source":["Getting the feature importances from the trained model"]},{"cell_type":"code","metadata":{"id":"fobLV_6367T9","colab_type":"code","outputId":"13e6126d-f298-4ec4-f645-4990dbad707b","executionInfo":{"status":"ok","timestamp":1591435811861,"user_tz":-60,"elapsed":12416,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["from sklearn.ensemble import RandomForestClassifier\n","my_model = RandomForestClassifier(n_estimators=100,\n","                                  random_state=0).fit(X, y)"],"execution_count":114,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"iO0J2jmzyPTg","colab_type":"code","outputId":"241c6b28-aed6-479a-eb9b-4ec8741c7ea5","executionInfo":{"status":"ok","timestamp":1591435815283,"user_tz":-60,"elapsed":14429,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["!pip install eli5"],"execution_count":115,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: eli5 in /usr/local/lib/python3.6/dist-packages (0.10.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from eli5) (1.12.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.6/dist-packages (from eli5) (2.11.2)\n","Requirement already satisfied: attrs>16.0.0 in /usr/local/lib/python3.6/dist-packages (from eli5) (19.3.0)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.6/dist-packages (from eli5) (0.22.2.post1)\n","Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from eli5) (1.18.4)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.6/dist-packages (from eli5) (0.10.1)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from eli5) (1.4.1)\n","Requirement already satisfied: tabulate>=0.7.7 in /usr/local/lib/python3.6/dist-packages (from eli5) (0.8.7)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.6/dist-packages (from jinja2->eli5) (1.1.1)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn>=0.18->eli5) (0.15.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9LKRANZeyvKO","colab_type":"code","colab":{}},"source":["import eli5"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fW8yeTNtyxqV","colab_type":"code","colab":{}},"source":["from eli5.sklearn import PermutationImportance\n","\n","perm = PermutationImportance(my_model,n_iter=2).fit(X, y)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LNhy5Hmwy_-y","colab_type":"code","outputId":"b3e5fbeb-22de-4d02-c37a-d6b88bc06b6c","executionInfo":{"status":"ok","timestamp":1591435884258,"user_tz":-60,"elapsed":80924,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":391}},"source":["eli5.show_weights(perm, feature_names = X.columns.tolist())"],"execution_count":118,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","    <style>\n","    table.eli5-weights tr:hover {\n","        filter: brightness(85%);\n","    }\n","</style>\n","\n","\n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","        <table class=\"eli5-weights eli5-feature-importances\" style=\"border-collapse: collapse; border: none; margin-top: 0em; table-layout: auto;\">\n","    <thead>\n","    <tr style=\"border: none;\">\n","        <th style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">Weight</th>\n","        <th style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">Feature</th>\n","    </tr>\n","    </thead>\n","    <tbody>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 80.00%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0684\n","                \n","                    &plusmn; 0.0016\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                balance\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 80.71%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0649\n","                \n","                    &plusmn; 0.0001\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                day\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 82.12%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0583\n","                \n","                    &plusmn; 0.0004\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                age\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 83.95%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0499\n","                \n","                    &plusmn; 0.0005\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                housing\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 84.15%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0490\n","                \n","                    &plusmn; 0.0008\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                previous\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 84.92%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0457\n","                \n","                    &plusmn; 0.0014\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                campaign\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 89.27%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0281\n","                \n","                    &plusmn; 0.0003\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                marital_married\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 89.36%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0277\n","                \n","                    &plusmn; 0.0003\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                month_may\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 89.97%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0255\n","                \n","                    &plusmn; 0.0003\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                marital_single\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 90.14%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0249\n","                \n","                    &plusmn; 0.0002\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                education_tertiary\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 91.63%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0197\n","                \n","                    &plusmn; 0.0006\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                education_secondary\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 92.11%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0181\n","                \n","                    &plusmn; 0.0005\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                loan\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 92.15%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0180\n","                \n","                    &plusmn; 0.0003\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                job_blue-collar\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 92.53%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0167\n","                \n","                    &plusmn; 0.0001\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                job_management\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 93.73%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0130\n","                \n","                    &plusmn; 0.0003\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                job_technician\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 93.78%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0129\n","                \n","                    &plusmn; 0.0002\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                month_apr\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 93.88%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0126\n","                \n","                    &plusmn; 0.0002\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                month_aug\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 94.15%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0118\n","                \n","                    &plusmn; 0.0009\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                month_jul\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 94.75%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0101\n","                \n","                    &plusmn; 0.0011\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                education_primary\n","            </td>\n","        </tr>\n","    \n","        <tr style=\"background-color: hsl(120, 100.00%, 94.79%); border: none;\">\n","            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n","                0.0100\n","                \n","                    &plusmn; 0.0002\n","                \n","            </td>\n","            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n","                month_jun\n","            </td>\n","        </tr>\n","    \n","    \n","        \n","            <tr style=\"background-color: hsl(120, 100.00%, 94.79%); border: none;\">\n","                <td colspan=\"2\" style=\"padding: 0 0.5em 0 0.5em; text-align: center; border: none; white-space: nowrap;\">\n","                    <i>&hellip; 18 more &hellip;</i>\n","                </td>\n","            </tr>\n","        \n","    \n","    </tbody>\n","</table>\n","    \n","\n","    \n","\n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","    \n","\n","\n","\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]},"execution_count":118}]},{"cell_type":"code","metadata":{"id":"DxAQwJq-0rAC","colab_type":"code","colab":{}},"source":["df_final = X[['balance','day','age','housing','campaign',\n","            'previous','month_may','marital_married','education_tertiary','marital_single', \n","            'education_secondary','job_blue-collar','loan','job_management','month_aug', 'job_technician','month_jul', 'month_jun', 'job_services', 'month_nov', 'contact_cellular' ]]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JVb5xftW_pBO","colab_type":"code","outputId":"2340b82f-2abe-4593-b0db-646c41d81753","executionInfo":{"status":"ok","timestamp":1591435884261,"user_tz":-60,"elapsed":77624,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":334}},"source":["df_final.describe()"],"execution_count":120,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>balance</th>\n","      <th>day</th>\n","      <th>age</th>\n","      <th>housing</th>\n","      <th>campaign</th>\n","      <th>previous</th>\n","      <th>month_may</th>\n","      <th>marital_married</th>\n","      <th>education_tertiary</th>\n","      <th>marital_single</th>\n","      <th>education_secondary</th>\n","      <th>job_blue-collar</th>\n","      <th>loan</th>\n","      <th>job_management</th>\n","      <th>month_aug</th>\n","      <th>job_technician</th>\n","      <th>month_jul</th>\n","      <th>month_jun</th>\n","      <th>job_services</th>\n","      <th>month_nov</th>\n","      <th>contact_cellular</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.00000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1179.897989</td>\n","      <td>15.806419</td>\n","      <td>40.715025</td>\n","      <td>0.555838</td>\n","      <td>2.551746</td>\n","      <td>0.435513</td>\n","      <td>0.304483</td>\n","      <td>0.601933</td>\n","      <td>0.294198</td>\n","      <td>0.282896</td>\n","      <td>0.554268</td>\n","      <td>0.221627</td>\n","      <td>0.160226</td>\n","      <td>0.209197</td>\n","      <td>0.138174</td>\n","      <td>0.168034</td>\n","      <td>0.152507</td>\n","      <td>0.118135</td>\n","      <td>0.09188</td>\n","      <td>0.087810</td>\n","      <td>0.935724</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1896.964991</td>\n","      <td>8.322476</td>\n","      <td>9.847111</td>\n","      <td>0.496878</td>\n","      <td>2.214597</td>\n","      <td>1.190454</td>\n","      <td>0.460193</td>\n","      <td>0.489505</td>\n","      <td>0.455687</td>\n","      <td>0.450411</td>\n","      <td>0.497052</td>\n","      <td>0.415346</td>\n","      <td>0.366820</td>\n","      <td>0.406740</td>\n","      <td>0.345087</td>\n","      <td>0.373901</td>\n","      <td>0.359516</td>\n","      <td>0.322771</td>\n","      <td>0.28886</td>\n","      <td>0.283022</td>\n","      <td>0.245247</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-627.000000</td>\n","      <td>1.000000</td>\n","      <td>23.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>83.000000</td>\n","      <td>8.000000</td>\n","      <td>33.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>472.000000</td>\n","      <td>16.000000</td>\n","      <td>39.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1386.000000</td>\n","      <td>21.000000</td>\n","      <td>48.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>13164.000000</td>\n","      <td>31.000000</td>\n","      <td>71.000000</td>\n","      <td>1.000000</td>\n","      <td>16.000000</td>\n","      <td>8.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.00000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            balance           day  ...     month_nov  contact_cellular\n","count  45211.000000  45211.000000  ...  45211.000000      45211.000000\n","mean    1179.897989     15.806419  ...      0.087810          0.935724\n","std     1896.964991      8.322476  ...      0.283022          0.245247\n","min     -627.000000      1.000000  ...      0.000000          0.000000\n","25%       83.000000      8.000000  ...      0.000000          1.000000\n","50%      472.000000     16.000000  ...      0.000000          1.000000\n","75%     1386.000000     21.000000  ...      0.000000          1.000000\n","max    13164.000000     31.000000  ...      1.000000          1.000000\n","\n","[8 rows x 21 columns]"]},"metadata":{"tags":[]},"execution_count":120}]},{"cell_type":"markdown","metadata":{"id":"-0qvd6Ar2u2S","colab_type":"text"},"source":["Feature Scaling"]},{"cell_type":"code","metadata":{"id":"cyR63TadEvAS","colab_type":"code","outputId":"2756a0b8-f692-42aa-8063-dc87e7f78b46","executionInfo":{"status":"ok","timestamp":1591435884263,"user_tz":-60,"elapsed":75365,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Splitting data into train and test sets\n","\n","X_train_org, X_test_org, y_train, y_test = train_test_split(df_final,y, random_state = 0)\n","\n","print(\"Size of training set: {}  size of test set:\"\n","      \" {}\\n\".format(X_train_org.shape[0],X_test_org.shape[0]))"],"execution_count":121,"outputs":[{"output_type":"stream","text":["Size of training set: 33908  size of test set: 11303\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zIsE1-IaEu7F","colab_type":"code","colab":{}},"source":["# Feature scaling using MinMaxScaler\n","\n","from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","X_train2 = pd.DataFrame(scaler.fit_transform(X_train_org))\n","X_test2= pd.DataFrame(scaler.transform(X_test_org))\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ivcGidF03xBl","colab_type":"code","outputId":"97b513e5-67c5-4847-f08e-6eb2993fd3b9","executionInfo":{"status":"ok","timestamp":1591435884511,"user_tz":-60,"elapsed":73342,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["X_train2.head()"],"execution_count":123,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.326177</td>\n","      <td>0.633333</td>\n","      <td>0.333333</td>\n","      <td>1.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.123305</td>\n","      <td>0.933333</td>\n","      <td>0.166667</td>\n","      <td>1.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.109741</td>\n","      <td>0.433333</td>\n","      <td>0.270833</td>\n","      <td>1.0</td>\n","      <td>0.333333</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.074055</td>\n","      <td>0.133333</td>\n","      <td>0.354167</td>\n","      <td>0.0</td>\n","      <td>0.133333</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.045478</td>\n","      <td>0.266667</td>\n","      <td>0.458333</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         0         1         2    3         4   ...   16   17   18   19   20\n","0  0.326177  0.633333  0.333333  1.0  0.000000  ...  0.0  0.0  1.0  0.0  1.0\n","1  0.123305  0.933333  0.166667  1.0  0.000000  ...  0.0  0.0  0.0  0.0  0.0\n","2  0.109741  0.433333  0.270833  1.0  0.333333  ...  0.0  0.0  0.0  0.0  1.0\n","3  0.074055  0.133333  0.354167  0.0  0.133333  ...  0.0  0.0  0.0  0.0  1.0\n","4  0.045478  0.266667  0.458333  0.0  0.000000  ...  0.0  1.0  0.0  0.0  1.0\n","\n","[5 rows x 21 columns]"]},"metadata":{"tags":[]},"execution_count":123}]},{"cell_type":"code","metadata":{"id":"lCSar1XCEt87","colab_type":"code","colab":{}},"source":["X_train2.columns = X_train_org.columns.values\n","X_test2.columns = X_test_org.columns.values\n","X_train2.index = X_train_org.index.values\n","X_test2.index = X_test_org.index.values\n","X_train = X_train2\n","X_test = X_test2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3lcRXtf6Et5B","colab_type":"code","outputId":"ce491e05-06ad-45a6-ed3f-de949e4a99cc","executionInfo":{"status":"ok","timestamp":1591435884516,"user_tz":-60,"elapsed":71293,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"source":["X_train.head()"],"execution_count":125,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>balance</th>\n","      <th>day</th>\n","      <th>age</th>\n","      <th>housing</th>\n","      <th>campaign</th>\n","      <th>previous</th>\n","      <th>month_may</th>\n","      <th>marital_married</th>\n","      <th>education_tertiary</th>\n","      <th>marital_single</th>\n","      <th>education_secondary</th>\n","      <th>job_blue-collar</th>\n","      <th>loan</th>\n","      <th>job_management</th>\n","      <th>month_aug</th>\n","      <th>job_technician</th>\n","      <th>month_jul</th>\n","      <th>month_jun</th>\n","      <th>job_services</th>\n","      <th>month_nov</th>\n","      <th>contact_cellular</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>33362</th>\n","      <td>0.326177</td>\n","      <td>0.633333</td>\n","      <td>0.333333</td>\n","      <td>1.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>28229</th>\n","      <td>0.123305</td>\n","      <td>0.933333</td>\n","      <td>0.166667</td>\n","      <td>1.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>37952</th>\n","      <td>0.109741</td>\n","      <td>0.433333</td>\n","      <td>0.270833</td>\n","      <td>1.0</td>\n","      <td>0.333333</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>43408</th>\n","      <td>0.074055</td>\n","      <td>0.133333</td>\n","      <td>0.354167</td>\n","      <td>0.0</td>\n","      <td>0.133333</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>9897</th>\n","      <td>0.045478</td>\n","      <td>0.266667</td>\n","      <td>0.458333</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        balance       day       age  ...  job_services  month_nov  contact_cellular\n","33362  0.326177  0.633333  0.333333  ...           1.0        0.0               1.0\n","28229  0.123305  0.933333  0.166667  ...           0.0        0.0               0.0\n","37952  0.109741  0.433333  0.270833  ...           0.0        0.0               1.0\n","43408  0.074055  0.133333  0.354167  ...           0.0        0.0               1.0\n","9897   0.045478  0.266667  0.458333  ...           0.0        0.0               1.0\n","\n","[5 rows x 21 columns]"]},"metadata":{"tags":[]},"execution_count":125}]},{"cell_type":"code","metadata":{"id":"RV05yCyQApp6","colab_type":"code","outputId":"b2e3acd6-5973-47d7-f3bf-02d6842bcf31","executionInfo":{"status":"ok","timestamp":1591435885669,"user_tz":-60,"elapsed":71482,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":692}},"source":["# Correlation matrix between features\n","\n","plt.subplots(figsize=(10,10))\n","sns.heatmap(X_train.corr())\n","plt.show();"],"execution_count":126,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 2 Axes>"]},"metadata":{"tags":[],"image/png":{"width":661,"height":675},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hf_v8RgJ7Kgt","colab_type":"text"},"source":["Models:\n"]},{"cell_type":"markdown","metadata":{"id":"lMKslrxk7NQv","colab_type":"text"},"source":["1: Logistic Regression"]},{"cell_type":"code","metadata":{"id":"FL5ZCWMDCBce","colab_type":"code","outputId":"4294b906-d56e-414d-fe4b-ef2fd0f66349","executionInfo":{"status":"ok","timestamp":1591375744683,"user_tz":-60,"elapsed":79602,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["lreg=LogisticRegression(random_state=0)\n","lreg = lreg.fit(X_train,y_train)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Nt3SlIPZCBYk","colab_type":"code","colab":{}},"source":["y_pred = lreg.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4zbdTYWbCkHv","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"c5Sd2BVQHfx_","colab_type":"code","outputId":"d0e67ac4-ae67-4a30-de0f-08d80fd1efaf","executionInfo":{"status":"ok","timestamp":1591375755689,"user_tz":-60,"elapsed":555,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8816243475183579\n","prec 0.41333333333333333\n","rec 0.02339622641509434\n","f1 0.04428571428571429\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"F8v1HmbzCAz4","colab_type":"code","colab":{}},"source":["model_results_Lreg = pd.DataFrame([['Logistic Regression', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = model_results_Lreg"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NiAAZpacCvth","colab_type":"code","outputId":"ffdf0e85-a16b-4beb-ca70-ab6acadbdd65","executionInfo":{"status":"ok","timestamp":1591375758326,"user_tz":-60,"elapsed":634,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":80}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286"]},"metadata":{"tags":[]},"execution_count":245}]},{"cell_type":"markdown","metadata":{"id":"iJtywCMBTtDO","colab_type":"text"},"source":["2. KNeighbors"]},{"cell_type":"code","metadata":{"id":"jBovW0g5Du3g","colab_type":"code","outputId":"eea9afd4-d2c6-4951-a6a5-c35fe07c5cf7","executionInfo":{"status":"ok","timestamp":1591375762770,"user_tz":-60,"elapsed":694,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["knn=KNeighborsClassifier(n_neighbors=5,metric=\"minkowski\",p=2)\n","knn = knn.fit(X_train,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"GpEWqsH9Du0G","colab_type":"code","colab":{}},"source":["y_pred = knn.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OYG2LuksDuxY","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0TAgdTQjG2HQ","colab_type":"code","outputId":"5862eb7d-f704-4588-aef2-fad0b8125880","executionInfo":{"status":"ok","timestamp":1591375774954,"user_tz":-60,"elapsed":419,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8771122710784748\n","prec 0.41878172588832485\n","rec 0.12452830188679245\n","f1 0.19197207678883074\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JMhGdVoiDuuB","colab_type":"code","colab":{}},"source":["model_results_knn = pd.DataFrame([['KNN', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_knn, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hIsyhZvAGRZ-","colab_type":"code","outputId":"e365547b-aa65-4a42-c885-727931be3f21","executionInfo":{"status":"ok","timestamp":1591375777103,"user_tz":-60,"elapsed":489,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":111}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972"]},"metadata":{"tags":[]},"execution_count":251}]},{"cell_type":"markdown","metadata":{"id":"E_e9nbYsTvbx","colab_type":"text"},"source":["3. SVC (linear kernel)"]},{"cell_type":"code","metadata":{"id":"NnjnVQA4E7-9","colab_type":"code","outputId":"0579c59b-39d1-47e3-e261-e77c5d7e342f","executionInfo":{"status":"ok","timestamp":1591375834177,"user_tz":-60,"elapsed":55207,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["svc_lin=SVC(kernel=\"linear\",random_state=0,probability=True)\n","svc_lin = svc_lin.fit(X_train,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"4_HLJUeGFfdr","colab_type":"code","colab":{}},"source":["y_pred = svc_lin.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DL-dhcvhE774","colab_type":"code","outputId":"3629aaf6-94f0-498e-cd13-b927d64fe847","executionInfo":{"status":"ok","timestamp":1591375916420,"user_tz":-60,"elapsed":533,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"pxLzLv5zIWPA","colab_type":"code","outputId":"049763cf-a0b8-4635-ff0a-2359c741db26","executionInfo":{"status":"ok","timestamp":1591375918417,"user_tz":-60,"elapsed":606,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8827744846500929\n","prec 0.0\n","rec 0.0\n","f1 0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lsbs1FEsE75Q","colab_type":"code","colab":{}},"source":["model_results_svc_lin = pd.DataFrame([['SVC_Lin', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_svc_lin, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"P72-7usME71T","colab_type":"code","outputId":"596405a5-2eef-4244-cd78-d29e45719ecc","executionInfo":{"status":"ok","timestamp":1591375921414,"user_tz":-60,"elapsed":409,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":142}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SVC_Lin</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972\n","2              SVC_Lin  0.882774   0.000000  0.000000  0.000000"]},"metadata":{"tags":[]},"execution_count":257}]},{"cell_type":"markdown","metadata":{"id":"cKM6Pet9TyEL","colab_type":"text"},"source":["4. SVC (RBF kernel)"]},{"cell_type":"code","metadata":{"id":"m0wKEo_vIfq4","colab_type":"code","outputId":"6d1a9bdf-5b9d-4368-abc1-a291f45dc9df","executionInfo":{"status":"ok","timestamp":1591376428307,"user_tz":-60,"elapsed":500023,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["svc_rbf=SVC(kernel=\"rbf\",random_state=0,probability=True)\n","svc_rbf = svc_rbf.fit(X_train,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"sN0cPeqcIfn_","colab_type":"code","colab":{}},"source":["y_pred = svc_rbf.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"w5DXvFnAIflH","colab_type":"code","outputId":"ef356aac-7139-4d4b-ce0d-dadb842aba99","executionInfo":{"status":"ok","timestamp":1591376505485,"user_tz":-60,"elapsed":10211,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"4rgvNX1ZIfh8","colab_type":"code","outputId":"4bf9c2b5-311f-4f80-e5d0-3dd113b7dce8","executionInfo":{"status":"ok","timestamp":1591376516966,"user_tz":-60,"elapsed":7448,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8827744846500929\n","prec 0.0\n","rec 0.0\n","f1 0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GwzKmrqlIfeL","colab_type":"code","colab":{}},"source":["model_results_svc_rbf = pd.DataFrame([['SVC_RBF', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_svc_rbf, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mwLkMujFIfat","colab_type":"code","outputId":"b15a798e-6ca2-421a-eb26-6b77df33e216","executionInfo":{"status":"ok","timestamp":1591376522275,"user_tz":-60,"elapsed":528,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["Results_all "],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SVC_Lin</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SVC_RBF</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972\n","2              SVC_Lin  0.882774   0.000000  0.000000  0.000000\n","3              SVC_RBF  0.882774   0.000000  0.000000  0.000000"]},"metadata":{"tags":[]},"execution_count":263}]},{"cell_type":"markdown","metadata":{"id":"hKYLRzbJTzYH","colab_type":"text"},"source":["5. GaussianNB"]},{"cell_type":"code","metadata":{"id":"lsSrQ1hOJNHd","colab_type":"code","outputId":"5bb04b31-f9b4-4376-d64b-0d4130fd7a09","executionInfo":{"status":"ok","timestamp":1591376525041,"user_tz":-60,"elapsed":568,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["gauss=GaussianNB()\n","gauss = gauss.fit(X_train,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/naive_bayes.py:206: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"P2gXOKFEJNEd","colab_type":"code","colab":{}},"source":["y_pred = gauss.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"F4eY4WIqJNBk","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"J9Om9FWOJM9-","colab_type":"code","outputId":"593b1cea-2e75-46a2-9385-813bdc8b8b88","executionInfo":{"status":"ok","timestamp":1591376528203,"user_tz":-60,"elapsed":431,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8359727505971866\n","prec 0.29416342412451363\n","rec 0.2852830188679245\n","f1 0.28965517241379307\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eXYbau70JM66","colab_type":"code","colab":{}},"source":["model_results_gnb = pd.DataFrame([['GNB', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_gnb, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"y4hSKJfLJM3R","colab_type":"code","outputId":"8dc13870-4b5f-451b-e7a3-1826414caa78","executionInfo":{"status":"ok","timestamp":1591376530953,"user_tz":-60,"elapsed":354,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SVC_Lin</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SVC_RBF</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GNB</td>\n","      <td>0.835973</td>\n","      <td>0.294163</td>\n","      <td>0.285283</td>\n","      <td>0.289655</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972\n","2              SVC_Lin  0.882774   0.000000  0.000000  0.000000\n","3              SVC_RBF  0.882774   0.000000  0.000000  0.000000\n","4                  GNB  0.835973   0.294163  0.285283  0.289655"]},"metadata":{"tags":[]},"execution_count":269}]},{"cell_type":"markdown","metadata":{"id":"CubKy93AT1Xu","colab_type":"text"},"source":["6. Decision Tree"]},{"cell_type":"code","metadata":{"id":"06Ptp_7lJ1jV","colab_type":"code","colab":{}},"source":["tree=DecisionTreeClassifier(criterion=\"entropy\",random_state = 100, max_depth=3, min_samples_leaf=5)\n","tree = tree.fit(X_train,y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hy-cwAE8J1f4","colab_type":"code","colab":{}},"source":["y_pred = tree.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vXIIQDzJJ1Ji","colab_type":"code","outputId":"1fd6a1e4-a2fd-4e87-9814-86680c0c2c74","executionInfo":{"status":"ok","timestamp":1591376534065,"user_tz":-60,"elapsed":448,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"AFJgddiUJ1GZ","colab_type":"code","outputId":"7b6130bf-fce2-4aa8-ba9b-25de5cb5328b","executionInfo":{"status":"ok","timestamp":1591376535224,"user_tz":-60,"elapsed":541,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8827744846500929\n","prec 0.0\n","rec 0.0\n","f1 0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"c53AGWONJ1C6","colab_type":"code","colab":{}},"source":["model_results_tree = pd.DataFrame([['DTree', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_tree, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R4IeyKklJ0-1","colab_type":"code","outputId":"2928e83f-bbd5-4c1d-d340-a8fb5b5db6f0","executionInfo":{"status":"ok","timestamp":1591376536863,"user_tz":-60,"elapsed":504,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":235}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SVC_Lin</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SVC_RBF</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GNB</td>\n","      <td>0.835973</td>\n","      <td>0.294163</td>\n","      <td>0.285283</td>\n","      <td>0.289655</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>DTree</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972\n","2              SVC_Lin  0.882774   0.000000  0.000000  0.000000\n","3              SVC_RBF  0.882774   0.000000  0.000000  0.000000\n","4                  GNB  0.835973   0.294163  0.285283  0.289655\n","5                DTree  0.882774   0.000000  0.000000  0.000000"]},"metadata":{"tags":[]},"execution_count":275}]},{"cell_type":"markdown","metadata":{"id":"Sp8mPciOU1CJ","colab_type":"text"},"source":["7. XGBoost"]},{"cell_type":"code","metadata":{"id":"A3nIhnrhNe-u","colab_type":"code","outputId":"497af951-5413-4d25-b702-d479dedc11fc","executionInfo":{"status":"ok","timestamp":1591376544454,"user_tz":-60,"elapsed":4245,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["xgboost=XGBClassifier()\n","xgboost = xgboost.fit(X_train,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"vgLU22OaNe5M","colab_type":"code","colab":{}},"source":["y_pred = xgboost.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"idsxnoq8Ne0r","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V1x2gWKtNexX","colab_type":"code","outputId":"1547f6fa-5478-4d87-9f36-fa49fba4dfda","executionInfo":{"status":"ok","timestamp":1591376553968,"user_tz":-60,"elapsed":3895,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8826860125630364\n","prec 0.4978540772532189\n","rec 0.08754716981132075\n","f1 0.14890885750962773\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-pGf1xpuNet6","colab_type":"code","colab":{}},"source":["model_results_xgboost = pd.DataFrame([['XGBoost', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_xgboost, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"alY6Cy0aNepc","colab_type":"code","outputId":"9a6ce109-b2ae-477a-fda2-dc35aa14a890","executionInfo":{"status":"ok","timestamp":1591376558070,"user_tz":-60,"elapsed":355,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":266}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SVC_Lin</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SVC_RBF</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GNB</td>\n","      <td>0.835973</td>\n","      <td>0.294163</td>\n","      <td>0.285283</td>\n","      <td>0.289655</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>DTree</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>XGBoost</td>\n","      <td>0.882686</td>\n","      <td>0.497854</td>\n","      <td>0.087547</td>\n","      <td>0.148909</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972\n","2              SVC_Lin  0.882774   0.000000  0.000000  0.000000\n","3              SVC_RBF  0.882774   0.000000  0.000000  0.000000\n","4                  GNB  0.835973   0.294163  0.285283  0.289655\n","5                DTree  0.882774   0.000000  0.000000  0.000000\n","6              XGBoost  0.882686   0.497854  0.087547  0.148909"]},"metadata":{"tags":[]},"execution_count":281}]},{"cell_type":"markdown","metadata":{"id":"vzmTj4vYU2t7","colab_type":"text"},"source":["8. LightGBM"]},{"cell_type":"code","metadata":{"id":"V8VesylqOQZ7","colab_type":"code","outputId":"73b57e8b-3f08-447e-f582-c607a8f73bc1","executionInfo":{"status":"ok","timestamp":1591376560249,"user_tz":-60,"elapsed":931,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["lightgbm=LGBMClassifier()\n","lightgbm = lightgbm.fit(X_train,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"al-83gYXOQVm","colab_type":"code","colab":{}},"source":["y_pred = lightgbm.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"REW399E1OQSW","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XarBAmO8OQPP","colab_type":"code","outputId":"8d717af3-f1f2-45da-f6e7-c178e22565e1","executionInfo":{"status":"ok","timestamp":1591376563839,"user_tz":-60,"elapsed":494,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8853401751747324\n","prec 0.5498281786941581\n","rec 0.12075471698113208\n","f1 0.19801980198019803\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2C1By-DbOQMF","colab_type":"code","colab":{}},"source":["model_results_lightgbm = pd.DataFrame([['Light GBM', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_lightgbm, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cuaMnKfSOQIG","colab_type":"code","outputId":"6ee296fa-9ed9-422c-f7e9-6e9c63f27c92","executionInfo":{"status":"ok","timestamp":1591376570593,"user_tz":-60,"elapsed":492,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SVC_Lin</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SVC_RBF</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GNB</td>\n","      <td>0.835973</td>\n","      <td>0.294163</td>\n","      <td>0.285283</td>\n","      <td>0.289655</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>DTree</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>XGBoost</td>\n","      <td>0.882686</td>\n","      <td>0.497854</td>\n","      <td>0.087547</td>\n","      <td>0.148909</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Light GBM</td>\n","      <td>0.885340</td>\n","      <td>0.549828</td>\n","      <td>0.120755</td>\n","      <td>0.198020</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972\n","2              SVC_Lin  0.882774   0.000000  0.000000  0.000000\n","3              SVC_RBF  0.882774   0.000000  0.000000  0.000000\n","4                  GNB  0.835973   0.294163  0.285283  0.289655\n","5                DTree  0.882774   0.000000  0.000000  0.000000\n","6              XGBoost  0.882686   0.497854  0.087547  0.148909\n","7            Light GBM  0.885340   0.549828  0.120755  0.198020"]},"metadata":{"tags":[]},"execution_count":287}]},{"cell_type":"markdown","metadata":{"id":"i7fl-887hgaW","colab_type":"text"},"source":["Ensemble models"]},{"cell_type":"markdown","metadata":{"id":"_zQ3f5nOT2wm","colab_type":"text"},"source":["9. Random Forest Classifier"]},{"cell_type":"code","metadata":{"id":"aFoiXfyhOo59","colab_type":"code","outputId":"02c666cc-e55c-474e-c5f2-92bb7ab0e85f","executionInfo":{"status":"ok","timestamp":1591376584729,"user_tz":-60,"elapsed":897,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["forest=RandomForestClassifier(n_estimators=10,criterion=\"entropy\",random_state=0)\n","forest = forest.fit(X_train,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"tgvsVt_6Oo2y","colab_type":"code","colab":{}},"source":["y_pred = forest.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MDUOxB_3Ooze","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5bmceTwdOowN","colab_type":"code","outputId":"9b93622a-fab8-46e7-ad51-ceed656917dd","executionInfo":{"status":"ok","timestamp":1591376589061,"user_tz":-60,"elapsed":363,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8799433778642838\n","prec 0.4411764705882353\n","rec 0.09056603773584905\n","f1 0.15028177833437695\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GBs6JVxSOosf","colab_type":"code","colab":{}},"source":["model_results_forest = pd.DataFrame([['Random Forest', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_forest, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iBMpeQApOooS","colab_type":"code","outputId":"1ccefabf-d0e8-4b9d-c4b9-c2088574f642","executionInfo":{"status":"ok","timestamp":1591376592196,"user_tz":-60,"elapsed":595,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":328}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SVC_Lin</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SVC_RBF</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GNB</td>\n","      <td>0.835973</td>\n","      <td>0.294163</td>\n","      <td>0.285283</td>\n","      <td>0.289655</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>DTree</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>XGBoost</td>\n","      <td>0.882686</td>\n","      <td>0.497854</td>\n","      <td>0.087547</td>\n","      <td>0.148909</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Light GBM</td>\n","      <td>0.885340</td>\n","      <td>0.549828</td>\n","      <td>0.120755</td>\n","      <td>0.198020</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Random Forest</td>\n","      <td>0.879943</td>\n","      <td>0.441176</td>\n","      <td>0.090566</td>\n","      <td>0.150282</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972\n","2              SVC_Lin  0.882774   0.000000  0.000000  0.000000\n","3              SVC_RBF  0.882774   0.000000  0.000000  0.000000\n","4                  GNB  0.835973   0.294163  0.285283  0.289655\n","5                DTree  0.882774   0.000000  0.000000  0.000000\n","6              XGBoost  0.882686   0.497854  0.087547  0.148909\n","7            Light GBM  0.885340   0.549828  0.120755  0.198020\n","8        Random Forest  0.879943   0.441176  0.090566  0.150282"]},"metadata":{"tags":[]},"execution_count":293}]},{"cell_type":"markdown","metadata":{"id":"vR6ZtxFzhkcX","colab_type":"text"},"source":["10. Bagging classifier"]},{"cell_type":"code","metadata":{"id":"sZo-uyEWPPU0","colab_type":"code","outputId":"4545429f-580f-456a-804f-b9eb8b26f401","executionInfo":{"status":"ok","timestamp":1591376611586,"user_tz":-60,"elapsed":15104,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["bgcl = BaggingClassifier(n_estimators=100, max_samples= .7, bootstrap=True, oob_score=True, random_state=22)\n","bgcl = bgcl.fit(X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"DMo1r-1PPPRo","colab_type":"code","colab":{}},"source":["y_pred = bgcl.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0ey8mJnlPPOW","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lVf0G9t0PPLN","colab_type":"code","outputId":"74dc3213-8432-48a8-cf83-15d3791e1965","executionInfo":{"status":"ok","timestamp":1591376617122,"user_tz":-60,"elapsed":1526,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('acc',acc)\n","print('prec',prec)\n","print('rec',rec)\n","print('f1',f1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["acc 0.8835707334336017\n","prec 0.5121293800539084\n","rec 0.14339622641509434\n","f1 0.22405660377358494\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TP0CNupRPPIC","colab_type":"code","colab":{}},"source":["model_results_bgcl = pd.DataFrame([['Bagging Classifier', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_bgcl, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_tlgAGFRPPEC","colab_type":"code","outputId":"1f2abf8c-c35f-41eb-b78b-765141ab67a8","executionInfo":{"status":"ok","timestamp":1591376619684,"user_tz":-60,"elapsed":429,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":359}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.881624</td>\n","      <td>0.413333</td>\n","      <td>0.023396</td>\n","      <td>0.044286</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>0.877112</td>\n","      <td>0.418782</td>\n","      <td>0.124528</td>\n","      <td>0.191972</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SVC_Lin</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SVC_RBF</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GNB</td>\n","      <td>0.835973</td>\n","      <td>0.294163</td>\n","      <td>0.285283</td>\n","      <td>0.289655</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>DTree</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>XGBoost</td>\n","      <td>0.882686</td>\n","      <td>0.497854</td>\n","      <td>0.087547</td>\n","      <td>0.148909</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Light GBM</td>\n","      <td>0.885340</td>\n","      <td>0.549828</td>\n","      <td>0.120755</td>\n","      <td>0.198020</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Random Forest</td>\n","      <td>0.879943</td>\n","      <td>0.441176</td>\n","      <td>0.090566</td>\n","      <td>0.150282</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Bagging Classifier</td>\n","      <td>0.883571</td>\n","      <td>0.512129</td>\n","      <td>0.143396</td>\n","      <td>0.224057</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.881624   0.413333  0.023396  0.044286\n","1                  KNN  0.877112   0.418782  0.124528  0.191972\n","2              SVC_Lin  0.882774   0.000000  0.000000  0.000000\n","3              SVC_RBF  0.882774   0.000000  0.000000  0.000000\n","4                  GNB  0.835973   0.294163  0.285283  0.289655\n","5                DTree  0.882774   0.000000  0.000000  0.000000\n","6              XGBoost  0.882686   0.497854  0.087547  0.148909\n","7            Light GBM  0.885340   0.549828  0.120755  0.198020\n","8        Random Forest  0.879943   0.441176  0.090566  0.150282\n","9   Bagging Classifier  0.883571   0.512129  0.143396  0.224057"]},"metadata":{"tags":[]},"execution_count":299}]},{"cell_type":"markdown","metadata":{"id":"c8b9jET4YBjD","colab_type":"text"},"source":["Model comparison"]},{"cell_type":"markdown","metadata":{"id":"tOCnPSd3U5kq","colab_type":"text"},"source":["ROC Curve visualisation"]},{"cell_type":"code","metadata":{"id":"OqHMkMBfU63k","colab_type":"code","outputId":"f909e4c6-7473-4439-f875-e814fb6efa01","executionInfo":{"status":"ok","timestamp":1591376657550,"user_tz":-60,"elapsed":16514,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":605}},"source":["from sklearn.metrics import plot_roc_curve\n","\n","plt.figure(figsize=(10,10))\n","\n","ax = plt.gca()\n","\n","log_disp = plot_roc_curve(lreg, X_test, y_test, ax=ax, alpha=0.8)\n","knn_disp = plot_roc_curve(knn, X_test, y_test, ax=ax, alpha=0.8)\n","svm_lin_disp = plot_roc_curve(svc_lin, X_test, y_test, ax=ax, alpha=0.8)\n","svm_rbf_disp = plot_roc_curve(svc_rbf, X_test, y_test, ax=ax, alpha=0.8)\n","gauss_disp = plot_roc_curve(gauss, X_test, y_test, ax=ax, alpha=0.8)\n","tree_disp = plot_roc_curve(tree, X_test, y_test, ax=ax, alpha=0.8)\n","xgboost_disp = plot_roc_curve(xgboost, X_test, y_test, ax=ax, alpha=0.8)\n","lightgbm_disp = plot_roc_curve(lightgbm, X_test, y_test, ax=ax, alpha=0.8)\n","forest_disp = plot_roc_curve(forest, X_test, y_test, ax=ax, alpha=0.8)\n","bagging_disp = plot_roc_curve(bgcl, X_test, y_test, ax=ax, alpha=0.8)\n","\n","plt.legend(loc = 'lower right', prop={'size': 16})\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":608,"height":588},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"1q-vfGwpYUYs","colab_type":"text"},"source":["Decision:\n","\n","Considering the accuracy, precision, recall, f1 score and AUC score, we can shortlist the following models for further tuning:\n","\n","Logistic Regression, Bagging Classifier, LightGBM and XGBoost\n"]},{"cell_type":"markdown","metadata":{"id":"3IXaYMUkpGhA","colab_type":"text"},"source":["Reducing the dataset using PCA to retain 95% variance"]},{"cell_type":"code","metadata":{"id":"YM-l-VAkpR-v","colab_type":"code","colab":{}},"source":["from sklearn.decomposition import PCA\n","pca_red = PCA(n_components=0.95)\n","X_train_red = pd.DataFrame(pca_red.fit_transform(X_train))\n","X_test_red = pd.DataFrame(pca_red.transform(X_test))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gLHJFuMrpcb_","colab_type":"code","outputId":"79055f5d-181e-48c8-eec3-f061cefa6e54","executionInfo":{"status":"ok","timestamp":1591377132087,"user_tz":-60,"elapsed":12171,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":408}},"source":["X_train_red.info()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 33908 entries, 0 to 33907\n","Data columns (total 16 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   0       33908 non-null  float64\n"," 1   1       33908 non-null  float64\n"," 2   2       33908 non-null  float64\n"," 3   3       33908 non-null  float64\n"," 4   4       33908 non-null  float64\n"," 5   5       33908 non-null  float64\n"," 6   6       33908 non-null  float64\n"," 7   7       33908 non-null  float64\n"," 8   8       33908 non-null  float64\n"," 9   9       33908 non-null  float64\n"," 10  10      33908 non-null  float64\n"," 11  11      33908 non-null  float64\n"," 12  12      33908 non-null  float64\n"," 13  13      33908 non-null  float64\n"," 14  14      33908 non-null  float64\n"," 15  15      33908 non-null  float64\n","dtypes: float64(16)\n","memory usage: 4.1 MB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IRa6LT_leY77","colab_type":"text"},"source":["Logistic Regression"]},{"cell_type":"code","metadata":{"id":"TCvkCcv7pcX8","colab_type":"code","outputId":"b1aae81b-2dfe-4843-86d3-e8203f805bc2","executionInfo":{"status":"ok","timestamp":1591377278548,"user_tz":-60,"elapsed":550,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["lreg=LogisticRegression(random_state=0)\n","lreg = lreg.fit(X_train_red,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"bazy66iIpcUK","colab_type":"code","colab":{}},"source":["y_pred = lreg.predict(X_test_red)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hGN5_C6XpcQY","colab_type":"code","outputId":"63a8bb2e-2d9a-4e2b-bed1-5a1658bb6e97","executionInfo":{"status":"ok","timestamp":1591377340300,"user_tz":-60,"elapsed":3612,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_BrheoxnpcMi","colab_type":"code","colab":{}},"source":["model_results_Lreg = pd.DataFrame([['Logistic Regression', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = model_results_Lreg"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"442GRJQ6fbga","colab_type":"text"},"source":["XGBoost"]},{"cell_type":"code","metadata":{"id":"Q6moRvlPpcFC","colab_type":"code","outputId":"d6637b1f-4bab-40ba-fa46-4030cf7f3a9c","executionInfo":{"status":"ok","timestamp":1591377525615,"user_tz":-60,"elapsed":6054,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["xgboost=XGBClassifier()\n","xgboost = xgboost.fit(X_train_red,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"qNfC59f_pcAy","colab_type":"code","colab":{}},"source":["y_pred = xgboost.predict(X_test_red)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8wTLNzcApb8z","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4UuATi1Jpb4g","colab_type":"code","colab":{}},"source":["model_results_xgboost = pd.DataFrame([['XGBoost', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_xgboost, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"u7IWQ5Dsfk-H","colab_type":"code","outputId":"d55d84bd-96f9-4bf8-e272-857d1945e7f1","executionInfo":{"status":"ok","timestamp":1591377560510,"user_tz":-60,"elapsed":2467,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":111}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>XGBoost</td>\n","      <td>0.883217</td>\n","      <td>0.647059</td>\n","      <td>0.008302</td>\n","      <td>0.016393</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.882774   0.000000  0.000000  0.000000\n","1              XGBoost  0.883217   0.647059  0.008302  0.016393"]},"metadata":{"tags":[]},"execution_count":313}]},{"cell_type":"markdown","metadata":{"id":"H9FXYvuRf_Ws","colab_type":"text"},"source":["LightGBM"]},{"cell_type":"code","metadata":{"id":"NBY5fsR9fnGs","colab_type":"code","outputId":"09427f3f-e58c-4d68-fcba-f31f8573e5b0","executionInfo":{"status":"ok","timestamp":1591377665404,"user_tz":-60,"elapsed":1313,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["lightgbm=LGBMClassifier()\n","lightgbm = lightgbm.fit(X_train_red,y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"W7OvgRmFgBeX","colab_type":"code","colab":{}},"source":["y_pred = lightgbm.predict(X_test_red)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YXOXOtAcgDmk","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WOZ6FXa6gF2S","colab_type":"code","colab":{}},"source":["model_results_lightgbm = pd.DataFrame([['Light GBM', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_lightgbm, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vFa95uh3gKNX","colab_type":"code","outputId":"f50e99eb-e283-40b1-ddb1-98f16dee9656","executionInfo":{"status":"ok","timestamp":1591377707899,"user_tz":-60,"elapsed":573,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":142}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>XGBoost</td>\n","      <td>0.883217</td>\n","      <td>0.647059</td>\n","      <td>0.008302</td>\n","      <td>0.016393</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Light GBM</td>\n","      <td>0.883394</td>\n","      <td>0.525547</td>\n","      <td>0.054340</td>\n","      <td>0.098495</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.882774   0.000000  0.000000  0.000000\n","1              XGBoost  0.883217   0.647059  0.008302  0.016393\n","2            Light GBM  0.883394   0.525547  0.054340  0.098495"]},"metadata":{"tags":[]},"execution_count":318}]},{"cell_type":"markdown","metadata":{"id":"GERPyIrSgN5q","colab_type":"text"},"source":["Bagging Classifier"]},{"cell_type":"code","metadata":{"id":"tWHesWEpgMCV","colab_type":"code","outputId":"8dcfc9ee-134a-4d28-db5b-4d68dd009456","executionInfo":{"status":"ok","timestamp":1591377906654,"user_tz":-60,"elapsed":66863,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["bgcl = BaggingClassifier(n_estimators=100, max_samples= .7, bootstrap=True, oob_score=True, random_state=22)\n","bgcl = bgcl.fit(X_train_red, y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"ZOb2IygGgsXq","colab_type":"code","colab":{}},"source":["y_pred = bgcl.predict(X_test_red)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yEYYGL3hgyNK","colab_type":"code","colab":{}},"source":["acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OsobQa4Lgy7f","colab_type":"code","colab":{}},"source":["model_results_bgcl = pd.DataFrame([['Bagging Classifier', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_bgcl, ignore_index = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YMT_lQeeg2fi","colab_type":"code","outputId":"6df44b8e-28fa-4ee7-9ea6-4ff3920597fb","executionInfo":{"status":"ok","timestamp":1591377924653,"user_tz":-60,"elapsed":563,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>XGBoost</td>\n","      <td>0.883217</td>\n","      <td>0.647059</td>\n","      <td>0.008302</td>\n","      <td>0.016393</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Light GBM</td>\n","      <td>0.883394</td>\n","      <td>0.525547</td>\n","      <td>0.054340</td>\n","      <td>0.098495</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Bagging Classifier</td>\n","      <td>0.879236</td>\n","      <td>0.448187</td>\n","      <td>0.130566</td>\n","      <td>0.202221</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Model  Accuracy  Precision    Recall  F1 Score\n","0  Logistic Regression  0.882774   0.000000  0.000000  0.000000\n","1              XGBoost  0.883217   0.647059  0.008302  0.016393\n","2            Light GBM  0.883394   0.525547  0.054340  0.098495\n","3   Bagging Classifier  0.879236   0.448187  0.130566  0.202221"]},"metadata":{"tags":[]},"execution_count":323}]},{"cell_type":"code","metadata":{"id":"hXs8nWSJhA8v","colab_type":"code","outputId":"62275d74-275b-4e99-9bd7-b8b22213c54e","executionInfo":{"status":"ok","timestamp":1591378314705,"user_tz":-60,"elapsed":1697,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":605}},"source":["from sklearn.metrics import plot_roc_curve\n","\n","plt.figure(figsize=(10,10))\n","\n","ax = plt.gca()\n","\n","log_disp = plot_roc_curve(lreg, X_test_red, y_test, ax=ax, alpha=0.8)\n","xgboost_disp = plot_roc_curve(xgboost, X_test_red, y_test, ax=ax, alpha=0.8)\n","lightgbm_disp = plot_roc_curve(lightgbm, X_test_red, y_test, ax=ax, alpha=0.8)\n","bagging_disp = plot_roc_curve(bgcl, X_test_red, y_test, ax=ax, alpha=0.8)\n","\n","plt.legend(loc = 'lower right', prop={'size': 16})\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":608,"height":588},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"RNQ6RDUdhkWj","colab_type":"text"},"source":["Decision:\n","\n","Models built on reduced dataset have shown slight improvement on precision score but auc score, accuracy, recall and f1 score reduced\n","\n","We can then try fine tuning the hyper parameters and these models again with full dataset to check for any improvement in performance"]},{"cell_type":"markdown","metadata":{"id":"TdLIQCEii2vN","colab_type":"text"},"source":["Hyperparameter tuning using grid search"]},{"cell_type":"markdown","metadata":{"id":"518Kg7B_i7Ge","colab_type":"text"},"source":["Logistic Regression"]},{"cell_type":"code","metadata":{"id":"l0LoakBDiwQu","colab_type":"code","outputId":"72b141d3-48d3-4a64-f1a9-4ab05ee2dc66","executionInfo":{"status":"ok","timestamp":1591378547641,"user_tz":-60,"elapsed":7946,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["lreg=LogisticRegression(random_state = 0)\n","penalty = ['l1', 'l2']\n","# Create regularization hyperparameter space\n","C = [0.001,0.01,0.1,0.2,0.8,1.2,1.5]\n","hyperparameters = dict(C=C, penalty=penalty)\n","\n","# Create grid search using 5-fold cross validation\n","GS_lreg = GridSearchCV(lreg, hyperparameters, cv=5, verbose=0)\n","# Fit grid search\n","LR_best_model = GS_lreg.fit(X_train, y_train)\n","y_pred = GS_lreg.predict(X_test)\n","\n","acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","\n","model_results_Lreg = pd.DataFrame([['LinearSVM_GridCV', acc, prec, rec, f1]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = model_results_Lreg\n","\n","\n","print(\"Best Train Accuracy score: \",GS_lreg.best_score_)\n","print(\"Best parameters:\", GS_lreg.best_estimator_)\n","print(\"Best Test Accuracy score :\", accuracy_score(y_test, y_pred))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n","\n","  FitFailedWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n","\n","  FitFailedWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n","\n","  FitFailedWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n","\n","  FitFailedWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n","\n","  FitFailedWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n","\n","  FitFailedWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n","\n","  FitFailedWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best Train Accuracy score:  0.8830954367049223\n","Best parameters: LogisticRegression(C=0.001, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=0, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)\n","Best Test Accuracy score : 0.8827744846500929\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"0tpeIqL4jXPR","colab_type":"code","outputId":"2ac260f1-98b5-405e-99fb-c1af8ddc31e4","executionInfo":{"status":"ok","timestamp":1591378560180,"user_tz":-60,"elapsed":531,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":80}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LinearSVM_GridCV</td>\n","      <td>0.882774</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              Model  Accuracy  Precision  Recall  F1 Score\n","0  LinearSVM_GridCV  0.882774        0.0     0.0       0.0"]},"metadata":{"tags":[]},"execution_count":327}]},{"cell_type":"markdown","metadata":{"id":"eIFuij0ZjqhP","colab_type":"text"},"source":["LightGBM"]},{"cell_type":"code","metadata":{"id":"3hIuNT6yjcHh","colab_type":"code","outputId":"718a8bff-5c2d-4f32-a23b-4d07898e96c7","executionInfo":{"status":"ok","timestamp":1591378790852,"user_tz":-60,"elapsed":57628,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["lightgbm=LGBMClassifier()\n","\n","params = {'boosting_type': 'gbdt',\n","          'max_depth' : -1,\n","          'objective': 'binary',\n","          'nthread': 3, # Updated from nthread\n","          'num_leaves': 64,\n","          'learning_rate': 0.05,\n","          'max_bin': 512,\n","          'subsample_for_bin': 200,\n","          'subsample': 1,\n","          'subsample_freq': 1,\n","          'colsample_bytree': 0.8,\n","          'reg_alpha': 5,\n","          'reg_lambda': 10,\n","          'min_split_gain': 0.5,\n","          'min_child_weight': 1,\n","          'min_child_samples': 5,\n","          'scale_pos_weight': 1,\n","          'num_class' : 1,\n","          'metric' : 'binary_error'}\n","\n","# Create parameters to search\n","gridParams = {\n","    'learning_rate': [0.005],\n","    'n_estimators': [40],\n","    'num_leaves': [8,12],\n","    'boosting_type' : ['gbdt'],\n","    'objective' : ['binary'],\n","    'random_state' : [501], \n","    'colsample_bytree' : [0.65, 0.66],\n","    'subsample' : [0.7,0.75],\n","    'reg_alpha' : [1,1.2],\n","    'reg_lambda' : [1,1.2,1.4],\n","    }\n","\n","\n","lightgbm = LGBMClassifier(boosting_type= 'gbdt',\n","          objective = 'binary',\n","          n_jobs = 3, \n","          silent = True,\n","          max_depth = params['max_depth'],\n","          max_bin = params['max_bin'],\n","          subsample_for_bin = params['subsample_for_bin'],\n","          subsample = params['subsample'],\n","          subsample_freq = params['subsample_freq'],\n","          min_split_gain = params['min_split_gain'],\n","          min_child_weight = params['min_child_weight'],\n","          min_child_samples = params['min_child_samples'],\n","          scale_pos_weight = params['scale_pos_weight'])\n","\n","# Create the grid\n","lightgbm_grid = GridSearchCV(lightgbm, gridParams,\n","                    verbose=3,\n","                    cv=5,\n","                    refit=True)\n","\n","# fitting the model for grid search\n","lightgbm_best_model= lightgbm_grid .fit(X_train, y_train)\n","\n","# Predicting Test Set\n","y_pred = lightgbm_best_model.predict(X_test) \n","\n","acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","\n","model_results_lightgbm = pd.DataFrame([['LightGBM_GridCV', acc, prec, rec, f1 ]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_lightgbm, ignore_index = True)\n","  \n","print(\"Best Train Accuracy score: \",lightgbm_grid.best_score_)\n","print(\"Best parameters:\", lightgbm_grid.best_estimator_)\n","print(\"Best Test Accuracy score :\", accuracy_score(y_test, y_pred))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 5 folds for each of 48 candidates, totalling 240 fits\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.2s remaining:    0.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.4s remaining:    0.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.65, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=8, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.2, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.7, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.2s\n","[CV] boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75 \n","[CV]  boosting_type=gbdt, colsample_bytree=0.66, learning_rate=0.005, n_estimators=40, num_leaves=12, objective=binary, random_state=501, reg_alpha=1.2, reg_lambda=1.4, subsample=0.75, score=0.883, total=   0.3s\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done 240 out of 240 | elapsed:   56.7s finished\n"],"name":"stderr"},{"output_type":"stream","text":["Best Train Accuracy score:  0.8830954367049223\n","Best parameters: LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.65,\n","               importance_type='split', learning_rate=0.005, max_bin=512,\n","               max_depth=-1, min_child_samples=5, min_child_weight=1,\n","               min_split_gain=0.5, n_estimators=40, n_jobs=3, num_leaves=8,\n","               objective='binary', random_state=501, reg_alpha=1, reg_lambda=1,\n","               scale_pos_weight=1, silent=True, subsample=0.7,\n","               subsample_for_bin=200, subsample_freq=1)\n","Best Test Accuracy score : 0.8827744846500929\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"eiUert4EkVgM","colab_type":"code","outputId":"a110dbca-a96f-46c4-ac1e-b26319b223d4","executionInfo":{"status":"ok","timestamp":1591378836025,"user_tz":-60,"elapsed":498,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":111}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LinearSVM_GridCV</td>\n","      <td>0.882774</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>LightGBM_GridCV</td>\n","      <td>0.882774</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              Model  Accuracy  Precision  Recall  F1 Score\n","0  LinearSVM_GridCV  0.882774        0.0     0.0       0.0\n","1   LightGBM_GridCV  0.882774        0.0     0.0       0.0"]},"metadata":{"tags":[]},"execution_count":332}]},{"cell_type":"markdown","metadata":{"id":"pSl9FCtXkMrA","colab_type":"text"},"source":["XGBoost"]},{"cell_type":"code","metadata":{"id":"V8Riz-qUjtHZ","colab_type":"code","outputId":"4928b987-a878-4564-95a0-a4d6ccfa7117","executionInfo":{"status":"ok","timestamp":1591382195376,"user_tz":-60,"elapsed":3344447,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["xgboost = XGBClassifier()\n","\n","parameters = {'nthread':[4], \n","              'objective':['binary:logistic'],\n","              'learning_rate': [0.01, 0.05], \n","              'max_depth': [2,6,8],\n","              'min_child_weight': [1,11],\n","              'silent': [1],\n","              'subsample': [0.8],\n","              'colsample_bytree': [0.7, 0.8],\n","              'n_estimators': [1000], \n","              'missing':[-999],\n","              'seed': [1337]}\n","\n","xgboost_grid = GridSearchCV(xgboost, parameters,cv=5, verbose=3, refit=True)\n","  \n","# fitting the model for grid search \n","xgboost_best_model= xgboost_grid.fit(X_train, y_train) \n","\n","# Predicting Test Set\n","y_pred = xgboost_best_model.predict(X_test) \n","\n","acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","\n","model_results_xgboost = pd.DataFrame([['XGBoost_GridCV', acc, prec, rec, f1 ]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_xgboost, ignore_index = True)\n","  \n","print(\"Best Train Accuracy score: \",xgboost_grid.best_score_)\n","print(\"Best parameters:\", xgboost_grid.best_estimator_)\n","print(\"Best Test Accuracy score :\", accuracy_score(y_test, y_pred))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 5 folds for each of 24 candidates, totalling 120 fits\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  12.6s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   12.6s remaining:    0.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.0s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:   24.7s remaining:    0.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.0s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.1s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  11.9s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.0s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  11.9s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  11.9s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.881, total=  30.0s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  30.4s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  29.9s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  29.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  30.0s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.882, total=  28.5s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  28.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  28.2s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  28.3s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  28.6s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.881, total=  41.1s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  41.9s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  41.1s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.889, total=  40.9s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  41.2s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.881, total=  38.2s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  38.0s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  37.6s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  37.7s\n","[CV] colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  38.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.882, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  11.7s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.882, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  11.7s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  11.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.880, total=  29.2s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  28.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  28.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.890, total=  29.2s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  28.9s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.880, total=  27.3s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  28.3s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  27.1s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.889, total=  27.2s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  27.6s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.881, total=  40.3s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  39.6s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  39.5s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.889, total=  39.7s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  39.8s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.880, total=  36.6s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  35.9s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  36.0s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  36.1s\n","[CV] colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.7, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  36.0s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  12.6s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.6s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  12.6s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  12.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.881, total=  33.0s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  32.1s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  32.2s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  31.9s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  32.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.881, total=  30.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  30.7s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  30.7s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  30.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  30.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.880, total=  45.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  44.7s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  44.6s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.889, total=  44.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  44.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.881, total=  40.7s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  40.8s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  41.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.889, total=  40.2s\n","[CV] colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.01, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  40.2s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.882, total=  12.6s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  12.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.889, total=  12.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  12.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.882, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  12.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  12.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  12.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=2, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.882, total=  12.5s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.880, total=  31.0s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.886, total=  30.7s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  31.1s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.891, total=  30.9s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  30.9s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.879, total=  29.0s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  29.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  29.2s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.889, total=  29.0s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=6, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  29.0s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.882, total=  43.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  42.7s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  43.2s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.891, total=  42.4s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=1, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.883, total=  42.7s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.879, total=  38.6s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.884, total=  38.2s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.887, total=  38.3s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.888, total=  38.1s\n","[CV] colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8 \n","[CV]  colsample_bytree=0.8, learning_rate=0.05, max_depth=8, min_child_weight=11, missing=-999, n_estimators=1000, nthread=4, objective=binary:logistic, seed=1337, silent=1, subsample=0.8, score=0.885, total=  38.5s\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done 120 out of 120 | elapsed: 54.8min finished\n"],"name":"stderr"},{"output_type":"stream","text":["Best Train Accuracy score:  0.8858087355379279\n","Best parameters: XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","              colsample_bynode=1, colsample_bytree=0.7, gamma=0,\n","              learning_rate=0.01, max_delta_step=0, max_depth=8,\n","              min_child_weight=1, missing=-999, n_estimators=1000, n_jobs=1,\n","              nthread=4, objective='binary:logistic', random_state=0,\n","              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=1337,\n","              silent=1, subsample=0.8, verbosity=1)\n","Best Test Accuracy score : 0.8848093426523932\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kFOwqUN4kjNc","colab_type":"code","outputId":"2bb6c014-85b1-4d52-89e7-8c3157dde713","executionInfo":{"status":"ok","timestamp":1591382239484,"user_tz":-60,"elapsed":10530,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":142}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LinearSVM_GridCV</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>LightGBM_GridCV</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>XGBoost_GridCV</td>\n","      <td>0.884809</td>\n","      <td>0.534535</td>\n","      <td>0.13434</td>\n","      <td>0.214717</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              Model  Accuracy  Precision   Recall  F1 Score\n","0  LinearSVM_GridCV  0.882774   0.000000  0.00000  0.000000\n","1   LightGBM_GridCV  0.882774   0.000000  0.00000  0.000000\n","2    XGBoost_GridCV  0.884809   0.534535  0.13434  0.214717"]},"metadata":{"tags":[]},"execution_count":334}]},{"cell_type":"markdown","metadata":{"id":"O6cU6UOokzHb","colab_type":"text"},"source":["Bagging Classifier"]},{"cell_type":"code","metadata":{"id":"X_UVQgBCkyN_","colab_type":"code","outputId":"33963f35-4006-4115-a913-25fe17611494","executionInfo":{"status":"ok","timestamp":1591382563872,"user_tz":-60,"elapsed":38508,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["dt = DecisionTreeClassifier(max_depth = 1)\n","bagging = BaggingClassifier(dt, n_estimators = 500, max_samples = 0.5, max_features = 0.5)\n","\n","parameters = {\n","    'base_estimator__max_depth' : [1, 3, 5],\n","    'max_samples' : [0.05, 0.1, 0.5]\n","}\n","\n","bagging_grid = GridSearchCV(BaggingClassifier(DecisionTreeClassifier(),\n","                                     n_estimators = 100, max_features = 0.5),\n","                   parameters)\n","\n","# fitting the model for grid search \n","bagging_best_model = bagging_grid.fit(X_train, y_train)\n","\n","# Predicting Test Set\n","y_pred = bagging_best_model.predict(X_test) \n","\n","acc = accuracy_score(y_test, y_pred)\n","prec = precision_score(y_test, y_pred)\n","rec = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","\n","model_results_bagging = pd.DataFrame([['Bagging_GridCV', acc, prec, rec, f1 ]],\n","               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n","\n","Results_all = Results_all.append(model_results_bagging, ignore_index = True)\n","  \n","print(\"Best Train Accuracy score: \",bagging_grid.best_score_)\n","print(\"Best parameters:\", bagging_grid.best_estimator_)\n","print(\"Best Test Accuracy score :\", accuracy_score(y_test, y_pred))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_bagging.py:645: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["Best Train Accuracy score:  0.8830954367049223\n","Best parameters: BaggingClassifier(base_estimator=DecisionTreeClassifier(ccp_alpha=0.0,\n","                                                        class_weight=None,\n","                                                        criterion='gini',\n","                                                        max_depth=1,\n","                                                        max_features=None,\n","                                                        max_leaf_nodes=None,\n","                                                        min_impurity_decrease=0.0,\n","                                                        min_impurity_split=None,\n","                                                        min_samples_leaf=1,\n","                                                        min_samples_split=2,\n","                                                        min_weight_fraction_leaf=0.0,\n","                                                        presort='deprecated',\n","                                                        random_state=None,\n","                                                        splitter='best'),\n","                  bootstrap=True, bootstrap_features=False, max_features=0.5,\n","                  max_samples=0.05, n_estimators=100, n_jobs=None,\n","                  oob_score=False, random_state=None, verbose=0,\n","                  warm_start=False)\n","Best Test Accuracy score : 0.8827744846500929\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"OpvIWUJDkyKV","colab_type":"code","outputId":"d5929eee-0e62-4c6b-fbda-9634fe8a7793","executionInfo":{"status":"ok","timestamp":1591382624636,"user_tz":-60,"elapsed":588,"user":{"displayName":"ninja turtle","photoUrl":"","userId":"08410201356610850962"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["Results_all"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1 Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LinearSVM_GridCV</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>LightGBM_GridCV</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>XGBoost_GridCV</td>\n","      <td>0.884809</td>\n","      <td>0.534535</td>\n","      <td>0.13434</td>\n","      <td>0.214717</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Bagging_GridCV</td>\n","      <td>0.882774</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              Model  Accuracy  Precision   Recall  F1 Score\n","0  LinearSVM_GridCV  0.882774   0.000000  0.00000  0.000000\n","1   LightGBM_GridCV  0.882774   0.000000  0.00000  0.000000\n","2    XGBoost_GridCV  0.884809   0.534535  0.13434  0.214717\n","3    Bagging_GridCV  0.882774   0.000000  0.00000  0.000000"]},"metadata":{"tags":[]},"execution_count":340}]},{"cell_type":"markdown","metadata":{"id":"ahydtMZi_tnR","colab_type":"text"},"source":["Decision:\n","\n","After hyper parameter tuning, there is no performance improvement for models except for XGBoost\n","\n","We can finally decide to work with XGBoost and Bagging Classifier model to improve their performence further. "]},{"cell_type":"code","metadata":{"id":"yZ_OGsRz4CAi","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}